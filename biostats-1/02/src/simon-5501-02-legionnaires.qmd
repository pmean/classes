---
title: "Univariate statistics for Legionnaires disease"
format: 
  html:
    slide-number: true
    embed-resources: true
editor: source
execute:
  echo: true
  message: false
  warning: false
---

## Data source

This program uses data from a fictional study of Legionnaires disease and produces some simple univariate statistics: means, standard deviations, and percentiles. There is a [data dictionary][dd] that provides more details about the data. 

[dd]: https://github.com/pmean/data/blob/main/files/legionnaires-disease.yaml

## Libraries

Here are the libraries you need for this program.

```{r setup}
library(tidyverse)
```

## Reading the data

Here is the code to read the data and show a glimpse. There are 31 columns total, but I am showing just a few of the columns here.

```{r read}
fn <- "../data/legionnaires-disease.txt"
ld_raw_data <- read_tsv(fn, col_types="cnn")
glimpse(ld_raw_data)
```

## Rename, 1

Notice how R encloses the first variable name (Room Number) in back-quotes. This is needed when a variable includes an embedded blank. You should rename this variable at your first opportunity.

```{r rename-1}
names(ld_raw_data)[1] <- "Room_Number"
glimpse(ld_raw_data)
```

## Rename, 2

I find that many of the mistakes that I make are due to inconsistencies in how I name variables. Capitalization is one of the biggest problems. So I have gotten into the habit of converting variable names to all lower case. That way I don't have to worry about whether it is "Before" or "before". Here is the code to convert every capital letter to a lowercase letter.

```{r rename-2}
names(ld_raw_data) <- tolower(names(ld_raw_data))
glimpse(ld_raw_data)
```

## Calculate means and standard deviations before remediation

```{r before-means}
ld_raw_data |>
  summarize(
    before_mn=mean(before),
    before_sd=sd(before)) 
```

The average colony count per cubic foot before remediation, 11.3, is quite large. The standard deviation, 2.8, represents a moderate amount of variation in this variable.

## Calculate means and standard deviations after remediation

```{r after-means}
ld_raw_data |>
  summarize(
    after_mn=mean(after),
    after_sd=sd(after)) 
```

The average colony count per cubic foot after remediation, 9.7, is still quite large. The standard deviation, 3.2, represents a moderate amount of variation in this variable and is roughly comparable to the variation before remediation.

## Calculate median and range before intervention

You could also use "median(before)" and  "min(before)" and "max(before)" in the code below.

```{r before-quantiles}
ld_raw_data |>
  summarize(
    before_median=quantile(before, probs=0.5),
    before_min=quantile(before, probs=0), 
    before_max=quantile(before, probs=1)) 
```

The median colony count before remediation, 11.3, is roughly the same as the mean. The data ranges from 7.1 to 14.6 colonies per cubic centimeter, a fairly wide range.

## Calculate median and range after intervention

```{r after-quantiles}
ld_raw_data |>
  summarize(
    after_q50=quantile(after, probs=0.5),
    after_min=quantile(after, probs=0), 
    after_max=quantile(after, probs=1)) 
```

The median colony count, 10.3, is slightly lower after remediation. The data range from 3.8 to 13.7 colonies per cubic centimeter and is about as wide as the range before remediation.

## Additional comments

The names that you choose for the left hand side of the equal sign are arbitrary. You should choose a descriptive name, but you have lots of options. A median of the before and after values could be called

-   Before_median, After_median
-   Median0, Median1
-   Second_quartile_A, Second_quartile_B
-   or many other reasonable choices.

## Calculate a change score

For data like this with two measurements before and after an intervention, you should compute a change score. The way the computations are done below, a positive value means a reduction in colony counts. Note that any time you make a major change in a dataset, you should save it with a different name. That makes it easier for you to back up if you end up going down a blind alley.

```{r}
ld_raw_data |>
  mutate(change=before-after) -> ld_change_scores
glimpse(ld_change_scores)
```
