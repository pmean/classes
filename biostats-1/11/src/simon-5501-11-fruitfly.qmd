---
title: "Analysis of fruitfly data"
format: 
  html:
    embed-resources: true
---

This program reads data on fruit fly longevity. Find more information in the [data dictionary][dd].

[dd]: https://github.com/pmean/data/blob/master/files/fruitfly.yaml

This code was written by Steve Simon on 2024-10-23 and is placed in the public domain.

## Datasets

-   fly: original data from fruitfly.txt
-   fly_1: re-order the categories in the variable cage

## Models

-   m1: analysis of variance, longevity ~ cage
-   m2: linear regression, same variables
-   m3: analysis of variance, make no females the reference category


## Load the tidyverse library

```{r}

#| label: setup
#| message: false
#| warning: false

library(broom)
library(tidyverse)
```

## List the variable names

```{r}
#| label: variable-list

fn <- "https://jse.amstat.org/datasets/fruitfly.dat.txt"
vlist <- c(
  "id",
  "partners",
  "type",
  "longevity",
  "thorax",
  "sleep")
```

#### Comments on the code

When a dataset does not have variables on the first line, you need to specify them in the code.

## Read the data and view a brief summary

```{r}
#| label: read

fly <- read_table(
  "../data/fruitfly.txt",
  col_types="nnnnnn",
  col_names=vlist)
glimpse(fly)
```

#### Comments on the code

The read_table function is part of the readr library, which is included when you specify the tidyverse library. You can use this function when you have one or more blanks or tabls between each data value.

## Create cage groups

```{r}
#| label: cage

fly |>
  mutate(cage=case_when(
    fly$partners==0 & fly$type==9 ~ "No females",
    fly$partners==1 & fly$type==0 ~ "One pregnant female",
    fly$partners==1 & fly$type==1 ~ "One virgin female",
    fly$partners==8 & fly$type==0 ~ "Eight pregnant females",
    fly$partners==8 & fly$type==1 ~ "Eight virgin females")) -> fly_1
```

#### Comments on the code

The case_when function is part of the dplyr library, which is included when you specify the tidyverse library. This function evaluates a series of tests (listed on the left side of the tilde) and assigns the particular value to the first test that evaluates to TRUE. If no test evaluates to TRUE, the case_when function assigns a missing value.

## Calculate descriptive statistics

```{r}
#| label: longevity-means

fly_1 |>
  group_by(cage) |>
  summarize(
    longevity_mn=mean(longevity),
    longevity_sd=sd(longevity),
    n=n())
```

#### Interpretation of the output

The mean lifespan is 39 days for the "Each virgin females" category, which is much lower than the other means. The means lifespan is 57 days for the "One virgin female" category and this is slightly lower than the remained three categories. The standard deviations are reasonably small and more or less consistent across all groups.

## Draw boxplot

```{r}
#| label: longevity-boxplot
#| fig.width: 6
#| fig.height: 2.5

fly_1 |>
  ggplot() +
  aes(longevity, cage) +
  geom_boxplot() +
  labs(
    caption="Steve Simon, 2024-10-23, CC0",
    x="Lifespan (days)",
    y="Cage residents")
```

#### Interpretation of the output

The boxplot shows a roughly normal distribution with no outliers.

## One factor analysis of variance for longevity

```{r}
#| label: longevity-one-factor-anova

m1 <- aov(longevity ~ cage, data=fly_1)
tidy(m1)
```

#### Interpretation of the output

The F-ratio is large and the p-value is small. Conclude that there is a 
difference among some or all of the population mean lifespans.

## Linear model for longevity, 1

```{r}
#| label: longevity-lm-1

m2 <- lm(longevity ~ cage, data=fly_1)
anova(m2)
```

#### Interpretation of the output

You can use linear regression to reach the same conclusion. The sums of squares,
degrees of freedom, F-ratio, and p-value all match.

## Linear model for longevity, 2

```{r}
#| label: longevity-lm-2

tidy(m2)
```

#### Comments on the code

The test statistics and p-values listed here do not make any adjustments for multiple comparisons. Some researchers think this is fine. Others prefer that you use the Tukey post hoc comparisons, which insures that the overall Type I error rate is less than 0.05.

#### Interpretation of the output

The linear model creates indicator variable for four out of the five category
levels. The reference category is "Eight pregnant females" which is the first category level in alphabetical order. 

The intercept, 63 days, is the estimated average longevity in days for the "Eight pregnant females" category.

The first slope is -25. The estimated average longevity decreases by 25 days when you switch from the "Eight pregnant females" category to the "Eight virgin females" category.

The second slope is 0.2. The estimated average longevity increases by 0.2 days when you switch from the "Eight pregnant females" category to the "No females" category.

The third slope is 1.4. The estimated average longevity increases by 1.4 days when you switch from the "Eight pregnant females" category to the "One pregnant female" category.

The fourth slope is -6.6. The estimated average longevity decreases by 6.6 days when you switch from the "Eight pregnant females" category to the "One virgin female" category.

## Re-order cage groups, 1

```{r}
#| label: re-order-1
new_order <- c(
  "No females",
  "One pregnant female",
  "Eight pregnant females",
  "One virgin female",
  "Eight virgin females")

fly_1 |>
  mutate(cage=factor(cage, levels=new_order)) -> fly_2
```

#### Comments on the code

The factor function converts a variable a new variable with number codes and labels. The order of labels is designated by the levels argument.

In this example, the code creates a reference category of "no females" instead of the default reference category based on alphabetical order.

## Re-order cage groups, 2

```{r}
#| label: re-order-2

m3 <- lm(longevity ~ cage, data=fly_2)
tidy(m3)
```

#### Interpretation of the output

The estimated average longevity is 64 days for the cage with no females. The cages with one and eight pregnant females change only slightly: one day or less on average. The cage with one virgin female has 6.8 days less in longevity on average and the cage with eight virgin females has 25 days in average longevity.

Do not interpret the p-values because they are not adjusted for multiple comparisons.

## Tukey post-hoc test

```{r}
m4 <- aov(longevity ~ cage, data=fly_2)
TukeyHSD(m4)
```

#### Interpretation of the output

There are ten possible comparisons among the five groups. Six of the confidence intervals contain zero. This indicates that there is no statistically significant difference between 

-   one pregnant female and no females
-   eight pregnant females and no females
-   eight pregnant females and one pregnant female
-   one virgin female and one pregnant female
-   one virgin female and one pregnant female
-   one virgin female and eight pregnant females

There is a statistically significant decrease in average longevity for

-   eight virgin females compared to no females
-   eight virgin females compared to one pregnant female
-   eight virgin females compared to eight pregnant females
-   eight virgin females compared to one virgin female

## Log transformation, 1

```{r}
#| label: log-longevity-anova-1

fly_2 |>
  mutate(log_longevity=log10(longevity)) -> fly_3

m3 <- aov(log_longevity ~ cage, data=fly_3)
tidy(m3)
```

#### Interpretation of the output

Although there are no problems with heterogeneity or non-normality, here is an 
illustration of how to use a log transformation with analysis of variance.

## Log transformation, 2

```{r}
#| label: log-longevity-anova-2

m3 |>
  TukeyHSD() |>
  tidy() -> m4

m4 |> 
  select(contrast, estimate, conf.low, conf.high) |>
  mutate(estimate=10^estimate) |>
  mutate(conf.low=10^conf.low) |>
  mutate(conf.hight=10^conf.high)
```

#### Comments on the code

It is better to transform these results back to the original scale of measurement before intepreting the confidence intervals.

#### Interpretation of the output

When you back-transform after a log transformation, the confidence intervals are confidence intervals for a ratio of means. If the confidence interval includes the value of 1, there is no statistically significant difference between the two groups.

In this example, there are four statistically significant differences, all involving the cage with eight virgin females. The fruitflies with eight virgin females have a longevity that 40% shorter on average frutiflies with no females. The relevant computation is 100*(1-0.5961729). These fruitfiles has a than 

## Kruskal-Wallis test

```{r}
#| label: kw

kruskal.test(longevity ~ cage, data=fly_2)
```

#### Interpretation of the output

It may not be needed with this particular dataset, but this is an illustration
of how to use the Kruskal-Wallis test. 

## Save important files for later use

```{r}
#| label: save

save(
  fly,
  fly_3,
  file="../data/fruitfly.RData")
```
