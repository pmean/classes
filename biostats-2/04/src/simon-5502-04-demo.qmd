---
title: "5502 module 04 demonstration program"
format: 
  html:
    embed-resources: true
editor: source
execute: 
  error: true
---

## File details

This program was written by Steve Simon on 2025-01-30 and is placed in the public domain. You can use this program any way you please.

There are three data files used in this program

-   full-moon-er-admissions, [csv file][ref01], [dictionary][ref02]
-   exercise-programs, [SPSS file][ref03], [dictionary][ref04]
-   fev, [csv file][ref05], [dictionary][ref06]
This program reads [albuquerqe-housing.csv][ref01],a dataset that examines sales prices for residential homes in 1993 in Albuquerque, New Mexico. Refer to the [data dictionary][ref02] for a more detailed description.

[ref01]: https://github.com/pmean/data/blob/main/files/full-moon-er-admissions.txt
[ref02]: https://github.com/pmean/data/blob/main/files/full-moon-er-admissions.yaml

[ref03]: https://github.com/pmean/data/blob/main/files/exercise-programs.sav
[ref04]: https://github.com/pmean/data/blob/main/files/exercise-programs.yaml

[ref05]: https://github.com/pmean/data/blob/main/files/fev.txt
[ref06]: https://github.com/pmean/data/blob/main/files/fev.yaml

```{r}
#| label: setup
#| message: false
#| warning: false

library(broom)
library(glue)
library(knitr)
library(tidyverse)
R.version.string
Sys.Date()
```

## Intermediate files

-   er: original data from full-moon-er-admissions.txt 
-   er_1: re-order Month and Moon levels
-   ex: original data from exercise.sav
-   pulmonary: original data from fev.csv

## pretty_p

```{r}
#| label: function-1

pretty_p <- function(p_table) {
  p_table |>
    mutate(
    p.value =
      case_when(
        p.value <  0.001 ~ "< 0.001",
        p.value >= 0.001 ~ as.character(round(p.value, 3))))
}
```

#### Comment on the code

I have been using the same set of instructions so often that I want to store it in a function for re-use. The pretty_p function takes a single argument, p-table, which is a data frame or tibble and modifies a variable inside it, p.value, by rounding it properly.

## pretty_n

```{r}
#| label: function-2

pretty_n <- function(n_table) {
  n_table |>
  	mutate(total=sum(n)) |>
  	mutate(pct=round(100*n/total)) |>
	  mutate(pct=glue("{pct}% ({n}/{total})")) |>
	  select(-n, -total)
}
```

#### Comment on the code

This is a similar task. After you compute a count, you use several other steps to compute a percentage and make it look nice. You can save time and trouble by creating a function for these repetitive tasks.

## pretty_mean

```{r}
#| label: function-3

pretty_mean <- function(d, v) {
  d |>
    filter(!is.na({{v}})) |>
    summarize(
      across({{v}}, 
        list(
          mean=mean, 
          sd=sd,
          min=min,
          max=max))) |>
  bind_cols(
    tibble(
      n_missing = nrow(
        filter(d, is.na({{v}})))))
}
```

## Read the moon data

```{r}

## Read the data

```{r}
#| label: moon-read

er <- read_tsv(
  file="../data/full-moon-er-admissions.txt",
  col_names=TRUE,
  col_types="ccn")
glimpse(er)
```

## Create factors

```{r}
#| label: moon-factors

month_list <- c(
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul")

phase_list <- c(
  "Before",
  "During",
  "After")

er |>
  mutate(Month=factor(Month, levels=month_list)) |>
  mutate(Moon=factor(Moon, levels=phase_list)) -> er_1
```

#### Comment on the code

By default, when R encounters a string, it will use alphabetical order in arranging the display in graphs. You can change this option by using the factor function. Create a vector listing the string values in the order that you want them displayed and then use that vector as the levels argument inside the factor function.

## Descriptive statistics

```{r}
#| label: moon-descriptives-1

er_1 |>
	count(Month) |>
	pretty_n()
```

#### Interpretation of the output

There are twelve months, each representing 8% (1/12) of the data.

```{r}
#| label: moon-descriptives-2

er_1 |>
	count(Moon) |>
  pretty_n()
```

#### Interpretation of the output

There are three phase times, each representing 33% (1/3) of the data.


```{r}
#| label: moon-descriptives-3

er_1 |>
  summarize(
    admission_mean=mean(Admission),
    admission_sd=sd(Admission),
    admission_min=min(Admission),
    admission_max=max(Admission))
```

#### Interpretation of the output

The average number of admissions is about 12 patients per day. There is a moderate amount of variation in the data.

## Lineplot

```{r}
#| label: moon-lineplot-1

er_1 |>
  ggplot() +
  aes(x=Moon, y=Admission) +
  geom_line(aes(group=Month)) +
  geom_text(aes(label=Month)) +
  xlab("Moon phase") +
  ylab("ER admission rate") +
  ggtitle("Plot drawn by Steve Simon on 2025-02-08")
```

#### Comment on the output

You have already used the [aes][ref07] function to define the x and y axes for various visualizations in ggplot. There are other applications of the aes function that can help control other features of your visualization.

The group argument in the aes function tells the geom_line function that you want a separate line for each month of the year. The label argument in the aes function tells the geom_text function to write the string value of month at each combination of x=Moon and y=Admission.

[ref07]: https://ggplot2.tidyverse.org/reference/aes.html

## Alternative lineplot

```{r}
#| label: moon-lineplot-2

er_1 |>
  ggplot() +
  aes(x=Month, y=Admission) +
  geom_line(aes(group=Moon)) +
  geom_text(aes(label=Moon)) +
  ylab("ER admission rate") +
  ggtitle("Plot drawn by Steve Simon on 2025-02-08")
```

#### Comment on the code

By swapping the roles of Month and Moon inside the ggplot function, you get a different appearance. It is not always clear which way to draw the line graph. It usually helps for you to look at both approaches, but then display only the one that you think helps create the simplest interpretation of what is going on.


## Single factor analysis of variance

```{r}
#| label: moon-anova-1

m1 <- lm(Admission ~ Moon, data=er_1)
tidy(m1) |>
  pretty_p()
```

#### Comment on the code

Normally the reference category would be selected as the first alphabetically, but we used the factor function to place the strings in the order "Before", "During", and "After". So the reference category is "Before". You might prefer to use "During" as the reference category, which would be easy enough to achieve.

#### Interpretation of the output

The estimated average admission rate before a full moon is 10.9 patients per day. The estimated average admission rate increases by 2.5 patients per day during a full moon and by 0.5 patients per day after a full moon. You should not interpret the p-values here because you need to adjust for multiple comparisons.

## Tukey post hoc test

```{r}
#| label: moon-tukey-1

m1 |>
  aov() |>
  TukeyHSD(ordered=TRUE) |>
  tidy() |>
  rename(p.value=adj.p.value) |>
  pretty_p()
```

#### Comments on the code

The TukeyHSD function produces a data frame with a variable labeled p adj. This is not a legal name in R, so you can't manipulate it easily. The tidy function helps here, but the name it chooses, adj.p.value, does not work with the pretty_p function. So you need to use the [rename][ref08] function (part of the dplyr/tidyverse libraries) first.

[ref08]: https://dplyr.tidyverse.org/reference/rename.html

#### Interpretation of the output

There are three possible comparisons among the levels of moon phase. None of the differences are statistically significant.

## Two factor analysis of variance

```{r}
#| label: moon-anova-2

m2 <- lm(Admission ~ Moon + Month, data=er_1)

tidy(m2) |>
  pretty_p()
```

#### Interpretation of the output

There are so many terms in this model that is difficult to interpret properly. The reference categories are "Before" and "Aug" so the intercept tells you that the estimated average admission rate before a full moon in August is 4.7 patients per day. Holding month constnat, the estimated average admission rate increases from before a full moon to during a full moon by 2.5 patients per day. You should not interpret the p-values here because you need to adjust for multiple comparisons.

## Tukey post hoc test

```{r}
#| label: moon-tukey-2

m2 |>
  aov() |>
  TukeyHSD(ordered=TRUE, which="Moon") |>
  tidy() |>
  rename(p.value=adj.p.value) |>
  pretty_p()
```

#### Comment on the code

With two factors, you should provide information to the TukeyHSD function about the pairwise comparison(s) that you are interested in. Use the which argument to do this. If you leave the which argument out, the TukeyHSD function will do all pairwise comparisons among the three moon phases and all pairwise comparisons among the 12 months. The real interest in this study is how admission rates change by the phase of the moon and you only included the month in the model to remove some of the variations over time.

#### Interpretation of the output

There is no statistically significant difference between the average admission rate before and after a full moon. There is a statistically difference between the average admission rate before and during a full moon. This, however, is a borderline difference. The adjusted p-values is close to 0.05 and the lower limit of the confidence interval comes within kissing distance of zero. There is no statistically significant difference between the average admission rate during a full moon and after a full moon. This, however, is also a borderline result. The confidence interval does include zero, but just barely. Perhaps the only safe interpretation here is that you need more data.

## Read

```{r}
#| label: exercise-read

library(haven)

ex <- read_sas(
  data_file="../data/exercise.sas7bdat")
glimpse(ex)
```

## Descriptive statistics

```{r}
#| label: exercise-descriptives-1

ex |>
	count(prog) |>
  pretty_n()
```

#### Interpretation of the output

```{r}
#| label: exercise-descriptives-2

ex |>
	count(i) |>
  pretty_n()
```

```{r}
#| label: exercise-descriptives-3

ex |>
  summarize(
    hours_mean=mean(hours),
    hours_sd=sd(hours),
    hours_min=min(hours),
    hours_max=max(hours))
```

```{r}
#| label: exercise-descriptives-4

ex |>
	count(female) |>
  pretty_n()
```

#### Interpretation of the output

```{r}
#| label: exercise-descriptives-5

ex |>
  summarize(
    effort_mean=mean(effort),
    effort_sd=sd(effort),
    effort_min=min(effort),
    effort_max=max(effort))
```

#### Interpretation of the output

```{r}
#| label: exercise-descriptives-6

ex |>
  summarize(
    loss_mean=mean(loss),
    loss_sd=sd(loss),
    loss_min=min(loss),
    loss_max=max(loss))
```

#### Interpretation of the output

## Interaction between prog and female on loss

## Interaction between prog and hours on loss

## Interaction between hours and effort on loss

## fev

```{r}
#| label: read-fev

vars <- c(
  "age", 
  "fev",
  "ht", 
  "sex",
  "smoke")

pulmonary <- read_csv(
  file="../data/fev.csv",
  col_names=vars,
  col_types="nnncc")
glimpse(pulmonary)
```



## Save everything

```{r}
#| label: save
save(
  moon,
  ex,
  pulmonary,
  file="../data/module04.RData")
```