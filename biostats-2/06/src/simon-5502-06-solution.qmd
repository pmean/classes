---
title: "simon-5502-05-solution"
format: 
  html:
    embed-resources: true
editor: source
execute: 
  error: true
---

## General directions

Use the dataset, [gardasil.xls][ref01], found on my github site. Refer to the [data dictionary][ref02] if needed. You may find it helpful to adapt some of the code from [simon-5502-05-demo.qmd][ref03]. This file is most easily read in using the [read_excel function][ref04] of the [readxl][ref05] library.

Warning: if you try to use the read_excel function within R and the file is already open inside of Microsoft Excel, you might get an error message. Microsoft has some security features that lock a file when it is in use. This is intended to prevent a second program from modifying a file at the same time that you are modifying it in Excel. It seems like a nice feature but it gets in the way of the read_excel and other similar functions. These programs don't have any nefarious schemes of modifying the file. They just want to look at what's inside. 

[ref01]: https://github.com/pmean/data/blob/main/files/gardasil.xls
[ref02]: https://github.com/pmean/data/blob/main/files/gardasil.yaml
[ref03]: https://github.com/pmean/classes/blob/master/biostats-2/06/src/simon-5502-06-demo.qmd
[ref04]: https://readxl.tidyverse.org/reference/read_excel.html
[ref05]: https://readxl.tidyverse.org/

## File details

Please do not look at this file before submitting your own work on this programming assignment. Although no interpretations are provided here, you must include them in your own submission.

This program was written by Steve Simon on 2025-02-27 and is placed in the public domain. You can use this program any way you please.

This program examines some logistic regression models to predict the probability that a patient will complete all three shots in the HPV vaccination program.

```{r}
#| label: setup
#| message: false
#| warning: false

library(broom)
library(glue)
library(readxl)
library(tidyverse)
R.version.string
Sys.Date()
```

## Intermediate files

-   ga: original data from gardasil.xls
-   ga_1: convert number codes to factors

## Read the data

```{r}
#| label: read

ga <- read_tsv(
  file="../data/gardasil.tsv",
  col_names=TRUE,
  col_types="n")
glimpse(ga)
```

## Question 1

You will not be graded on this, but get in the habit of computing some simple statistics (mean, standard deviation, minimum, and maximum for continuous variables and counts and percentages for categorical variables) for the important variables in this dataset. Also, get in the habit of providing brief interpretations.

Be sure to create factors with descriptive levels for any variables used in your analysis.

```{r}
#| label: create-factors
lab1 <- c("No", "Yes")
lab2 <- c(
  "Black",
  "White",
  "Hispanic",
  "Other")


ga |>
  mutate(
    Completed = 
      factor(
        Completed, 
        levels=0:1, 
        labels=lab1)) |>
  mutate(
    Race = 
      factor(
        Race, 
        levels=c(1, 0, 2, 3), 
        labels=lab2))-> ga_1
```

## Descriptive statistics

```{r}
#| label: descriptives-1

ga_1 |>
  summarize(
    Age_mean=mean(Age),
    Age_sd=sd(Age),
    Age_min=min(Age),
    Age_max=max(Age))
```

#### Interpretation of the output

Don't forget to put interpretations here and after every other program chunk that produces a table or graph.

## Descriptive statistics for Race

```{r}
#| label: descriptives-2

ga_1 |>
	count(Race, Completed) |>
  group_by(Race) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Completed=="Yes") |>
	select(-n, -total)
```

## Descriptive statistics for InsuranceType

```{r}
#| label: descriptives-3

ga_1 |>
	count(InsuranceType, Completed) |>
  group_by(InsuranceType) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Completed=="Yes") |>
	select(-n, -total)
```

## Descriptive statistics for MedAssist

```{r}
#| label: descriptives-4

ga_1 |>
	count(MedAssist, Completed) |>
  group_by(MedAssist) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Completed=="Yes") |>
	select(-n, -total)
```

## Descriptive statistics for Location

```{r}
#| label: descriptives-5

ga_1 |>
	count(Location, Completed) |>
  group_by(Location) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Completed=="Yes") |>
	select(-n, -total)
```


## Descriptive statistics for LocationType

```{r}
#| label: descriptives-6

ga_1 |>
	count(LocationType, Completed) |>
  group_by(LocationType) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Completed=="Yes") |>
	select(-n, -total)
```

## Descriptive statistics for PracticeType

```{r}
#| label: descriptives-7

ga_1 |>
	count(PracticeType, Completed) |>
  group_by(PracticeType) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Completed=="Yes") |>
	select(-n, -total)
```

## Logistic models

```{r}
#| label: logistic-1


m1 <- glm(
  Completed~Race,
  family=binomial,
  data=ga_1)

tidy(m1)
```

