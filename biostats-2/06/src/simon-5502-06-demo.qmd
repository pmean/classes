---
title: "simon-5502-06-demo"
format: 
  html:
    embed-resources: true
editor: source
execute: 
  error: false
---

## Start part 1

## File details

This program was written by Steve Simon on 2025-02-23 and is placed in the public domain. You can use this program any way you please.

There is one data files used in this program

-   titanic, [Tab delimited file][ref01], [dictionary][ref02]

[ref01]: https://github.com/pmean/data/blob/main/files/titanic.txt
[ref02]: https://github.com/pmean/data/blob/main/files/titanic.yaml

```{r}
#| label: setup
#| message: false
#| warning: false

library(broom)
library(epitools)
library(glue)
library(tidyverse)

R.version.string
Sys.Date()

sv <- NULL # tables and graphs for later use
```


## Intermediate files

-   titanic: Original data from titanic.txt
-   titanic_1: Create factor for Survived
-   titanic_2: Create indicator variables

## Saved output

-   sv
    -   table1: crosstabulation of Sex with Survived
    -   prop1: proportions by sex from table1
    -   prop_test: test for difference in proportions
    -   chisq: Chi-square test of independence
    -   fisher: Fisher's Exact Test
    -   or: Odds ratio with confidence intervals
    -   sex_pct: counts for sex
    -   pclass_pct: counts for passenger class
    -   survived_pct: counts for survived
    -   died_by_sex probability died by sex
    -   survived_by_sex: probability survived by sex
    -   m1: logistic regression using sex to predict survived
    -   m1_betas: parameter estimates for m1
    -   m1_or: odds ratio and confidence intervals for m1

## Read Titanic data

```{r}
#| label: ti-read

ti <- read_tsv(
  file="../data/titanic.txt",
  col_names=TRUE,
  col_types="ccncn",
  na="NA")
glimpse(ti) 
```

## Add factors

```{r}
#| label: ti-factors
lab1 <- c("Died", "Survived")
lab2 <- c("3rd", "2nd", "1st")

ti |> 
  mutate(
    Survived =
      factor(
    		Survived,
		    levels=1:0,
		    labels=c("Yes", "No"))) |>
  mutate(
    PClass = 
      factor(
        PClass,
        levels=lab2))-> ti_1
```

## Get counts of sex by survival

```{r}
#| label: ti-counts
sv$table1 <-xtabs(~Sex+Survived, data=ti_1)
sv$table1
```

#### Interpretation of the output

Normally, I would include interpretations here, but this is a review of last semester. Refer to simon-5501-13-titanic for the proper interpretations for the output in part 1 of this program.

## Get proportions for died/survived by sex

```{r}
#| label: ti-proportions
sv$table1 |>
  proportions("Sex") -> sv$prop1
sv$prop1
```


## Hypothesis test for two proportions

```{r}
#| label: ti-equality-of-proportions

sv$table1 |>
  prop.test(correct=FALSE) |>
  tidy() -> sv$prop_test
sv$prop_test
```

## Chi-squared test

```{r}
#| label: chi-square-test

sv$table1 |>
  chisq.test(correct=FALSE) |>
  tidy() -> sv$chisq
sv$chisq
```

## Fisher's Exact test

```{r}
#| label: fishers-exact

sv$table1 |>
  fisher.test() |>
  tidy() -> sv$fisher
sv$fisher
```

## Odds ratio calculation

```{r}
#| label: odds-ratio

sv$table1 |>
  oddsratio() -> sv$or
sv$or
```

#### Comment on the code

Normally I feed the output from various statistical models into the tidy function. This is part of the broom package. It standardizes the output by storing it in a tibble with consistent names for measurements like the test statistic and p-value.

## Start part 2

## Descriptive statistics for Sex

```{r}
#| label: ti-sex-pct

ti_1 |>
	count(Sex) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{pct}% ({n}/{total})")) |>
  select(-n, -total) -> sv$sex_pct
sv$sex_pct
```

#### Interpretation of the output

Slightly more than one-third of the passengers were female.

## Descriptive statistics for PClass

```{r}
#| label: ti-pclass-pct

ti_1 |>
	count(PClass) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{pct}% ({n}/{total})")) |>
  select(-n, -total) -> sv$pclass_pct
sv$pclass_pct
```

#### Interpretation of the output

Slightly more than half of the passengers were in third-class.

## Descriptive statistics for Survived

```{r}
#| label: ti-survived-pct

ti_1 |>
	count(Survived) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{pct}% ({n}/{total})")) |>
  select(-n, -total) -> sv$survived_pct
sv$survived_pct
```

#### Interpretation of the output

Slightly more than one-third of the patients survived.

## Proportion Survived=No by Sex

```{r}
#| label: ti-died-by-sex

ti_1 |>
	count(Sex, Survived) |>
  group_by(Sex) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
  mutate(odds=round(n/(total-n), 2)) |>
  mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Survived=="No") |>
  select(-n, -total) -> sv$died_by_sex
sv$died_by_sex
```

## Proportion Survived=Yes by Sex

```{r}
#| label: ti-survived-by-sex

ti_1 |>
	count(Sex, Survived) |>
  group_by(Sex) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
  mutate(odds=round(n/(total-n), 2)) |>
  mutate(pct=glue("{pct}% ({n}/{total})")) |>
  filter(Survived=="Yes") |>
  select(-n, -total) -> sv$survived_by_sex
sv$survived_by_sex
```

## Logistic model using Sex to predict Survived

```{r}
#| label: logistic-1

sv$m1 <- glm(Survived~Sex, family="binomial", data=ti_1)
```

#### Comment on the code

The [glm function][ref03] fits a broad class of statistical models known as generalized linear models. These models are useful when the normality and/or heterogeneity assumptions are not met or when the dependent variable takes an unusual form. The class of generalized linear models includes logistic regression, a regression model where the dependent variable can only have two possible values. You specify logistic regression with the family=binomial argument.

[ref03]: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/glm.html 

## Logistic coefficients for Sex

```{r}
#| label: coefficients-1

sv$m1 |>
  tidy() |>
  mutate(
    p.value =
      case_when(
        p.value >= 0.001 ~ glue("p = {round(p.value, 3)}"),
        p.value <  0.001 ~ "p < 0.001")) -> sv$m1_betas
sv$m1_betas
```

## Back transforming Sex coefficients

```{r}
#| label: or-1

sv$m1_betas |>
  filter(term != "(Intercept)") |>
  mutate(odds_ratio=exp(estimate)) |>
  mutate(lower=exp(estimate+qnorm(0.025)*std.error)) |>
  mutate(upper=exp(estimate+qnorm(0.975)*std.error)) |>
  select(term, odds_ratio, lower, upper) -> sv$m1_or
sv$m1_or
```
#### Comment on the code

#### Interpretation of the outpt

## Predicted values for Sex=male and Sex=female

```{r}
#| label: predicted-1

augment(sv$m1, newdata=tibble(Sex=c("male", "female")), type.predict="response")
```

## Logistic model using PClass to predict Survived

```{r}
#| label: logistic-2

m2 <- glm(Survived~PClass, family="binomial", data=ti_1)
```

## Logistic coefficients for PClass

```{r}
tidy(m2)
```

## Backtransforming PClass coefficients

```{r}
confint(m2)
```

## Start of part 3

## Start of part 4

## Logistic model with interaction

```{r}
#| label: logistic-3

m2 <- glm(Survived~Sex*PClass, family="binomial", data=ti_1)
tidy(m2)
```

## Save everything

```{r}
#| label: save
save(
  sv,
  ti,
  ti_1,
  file="../data/module06.RData")
```