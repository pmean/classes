---
title: "5502 module 03 demonstration program"
format: 
  html:
    embed-resources: true
editor: source
execute: 
  error: true
---

## 1. File details

This program was written by Steve Simon on 2025-01-30 and is placed in the public domain. You can use this program any way you please.

This program reads [albuquerqe-housing.csv][ref01],a dataset that examines sales prices for residential homes in 1993 in Albuquerque, New Mexico. Refer to the [data dictionary][ref02] for a more detailed description.

[ref01]: https://github.com/pmean/data/blob/main/files/albuquerque-housing.csv
[ref02]: https://github.com/pmean/data/blob/main/files/albuquerque-housing.yaml

```{r}
#| label: setup
#| message: false
#| warning: false

library(broom)
library(glue)
library(knitr)
library(tidyverse)
R.version.string
Sys.Date()
```

## 1. Intermediate files

-   alb: original data from albuquerque-housing.csv
-   m1: traditional t-test comparing prices by custom-built
-   m2: linear model comparing prices by custom-built

## 1. Read the data

```{r}
#| label: read

alb <- read_csv(
  file="../data/albuquerque-housing.csv",
  col_names=TRUE,
  col_types="nnnnccc",
  na=".")
glimpse(alb)
```

## 1. Descriptive statistics for price

```{r}
#| label: descriptives-1

alb |>
  summarize(
    price_mean=mean(price),
    price_sd=sd(price),
    price_min=min(price),
    price_max=max(price))
```

#### Comment on the code

I use the word "dollars" in the interpretation below rather than putting in a dollar sign ($) because if Quarto sees two of these in a single line of comments, it will try to produce a math equation. You can work around this by preceding the dollar sign with a backslash (\$). This backslash trick also works in your comments for other symbols that Quarto might get confused by, such as the asterisk or the square bracket symbols.

#### Interpretation of the output

The average house sold for 106 thousand dollars. The range of prices is large, going from 54 thousand dollars to 215 thousand dollars. All of these prices seem low, but perhaps those prices were quite normal back in 1993.

## 1. Descriptive statistics for sqft

```{r}
#| label: descriptives-2

alb |>
  summarize(
    sqft_mean=mean(sqft),
    sqft_sd=sd(sqft),
    sqft_min=min(sqft),
    sqft_max=max(sqft))
```

#### Interpretation of the output

The average house is 1,600 square feet. The range again is quite wide. The houses seems small; the largest is still less than 4,000 square feet. This may have been reasonable back in 1993.

## 1. Descriptive statistics for custom_build

```{r}
#| label: descriptives-3

alb |>
	count(custom_build) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(pct=glue("{pct}% ({n}/{total})")) |>
	select(-n, -total)
```

#### Interpretation of the output

Only about a quarter of the houses are custom-built.

## 1. Boxplot comparing price by custom_build.

```{r}
#| label: boxplot-1
#| fig.width: 6
#| fig.height: 2

alb |>
	ggplot() +
	  aes(x=custom_build, y=price) +
	  geom_boxplot() +
	  xlab("Custom built?") +
	  ylab("Price (dollars)") +
	  coord_flip() +
	  ggtitle("Plot drawn by Steve Simon on 2025-01-30")
```

#### Interpretation of the output

Prices are substantially higher for custom-built homes.

## 1. Mean price by custom_build

```{r}
#| label: group-means-1

alb |>
	group_by(custom_build) |>
	summarize(
		mean_price=mean(price),
		sd_price=sd(price),
		n=n())
```

#### Interpretation of the output

The mean price of regular homes is roughly 95 thousand dollars. Custom built homes have an average price of roughly 145 thousand dollars or 50 thousand dollars more expensive. Custom built houses are also more variable (a standard deviation of 48 thousand dollars compared to 25 thousand dollars).

## 1. The traditional form of the t-test

```{r}
#| label: t-test-1

m1 <- t.test(
	alb$price[alb$custom_build=="yes"],
	alb$price[alb$custom_build=="no"],
	var.equal=TRUE)
m1
```
#### Comment on the code

The [t.test][ref04] function will test the hypothesis that the mean is the same in both groups. It requires a bit of awkward syntax, so I prefer to do a comparable test using the lm function.

[ref04]: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/t.test.html

#### Interpretation of the output

The t statistic (7.2) is large, the p-value is very small (< 0.001), and the confidence interval (36 to 64 thousand dollars) excludes the value of zero. You should reject the null hypothesis and conclude that the average price of custom built homes is higher than the average price of regular homes.

## 1. Using lm to conduct a t-test

```{r}
#| label: t-test-2

m2 <- lm(price~custom_build, data=alb)
tidy(m2) |>
  mutate(
    p.value =
      case_when(
        p.value <  0.001 ~ "< 0.001",
        p.value >= 0.001 ~ as.character(round(p.value, 3))))
```

#### Interpretation of the output

The intercept, 95 thousand dollars, is the estimated average price when the indicator variable equals zero. R sets up the indicator variable with 1 for the category that appears last alphabetically.

The slope, 50 thousand dollars, is the estimated average change in price for a custom-built home compared to a regular home. The t-statistic (7.2) and the p-value match the values computed using the t.test function. Your conclusion, that the average price of custom built homes is higher than that of normal homes remains the same.

## 1. Confidence intervals

```{r}
#| label: ci

m2 |>
	confint() |>
	round(digits=-3)
```

#### Comment on the code

The [confint][ref05] function (part of base R) calculates confidence intervals for the estimates produces by the lm function as well as some other data analysis functions in R.

[ref05]: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/confint.html

#### Interpretation of the output

Even after allowing for sampling error, the difference in means is at least 36 thousand dollars and possibly as much as 64 thousand dollars.

## 1. Using the predict function

```{r}
#| label: predict

alb_1 <- tibble(custom_build=c("no", "yes"))
augment(m2, newdata=alb_1)
```

#### Comments on the code

You have already seen how the augment function (part of the broom package) can produce predicted values and residuals for the values in the dataset. You can also use augment to make future predictions. Just specify a data frame or tibble with the future values of the independent variable(s) that you want to predict at.

#### Interpretation of the output

The prediction for a future observation of a normal (not custom-built) home is 95 thousand dollars. The prediction for a custom-built house is 145 thousand dollars.

## 1. Examination of covariate

Note: the size of the home might be associated both with custom build and price. Let's investigate.

## 1. Boxplot of sqft by custom_build

```{r}
#| label: boxplot-2
#| fig.width: 6
#| fig.height: 2

alb |>
	ggplot() +
	  aes(x=custom_build, y=sqft) +
	  geom_boxplot() +
	  xlab("Custom built?") +
	  ylab("Size of the house (square feet)") +
	  coord_flip() +
	  ggtitle("Plot drawn by Steve Simon on 2025-01-30")
```

#### Interpretation of the output

Custom-built homes are much larger on average.

## 1. Mean sqft by custom_build

```{r}
#| label: group-means-2

alb |>
	group_by(custom_build) |>
	summarize(
		mean_sqft=mean(sqft),
		sd_sqft=sd(sqft),
		n=n())
```

#### Interpretation of the output

The average size of regular homes is about 1,500 square feet. Custom-built homes are about 650 square feet larger on average.

## Scatterplot of sqft and price

```{r}
#| label: scatterplot-2

alb |>
  ggplot() +
    aes(x=sqft, y=price) +
    geom_point() +
    geom_smooth(method="lm")
    xlab("Size of home (square feet)") +
    ylab("Price of home (dollars)") +
    ggtitle("Graph drawn by Steve Simon on 2025-02-02")
```

#### Interpretation of the output

There is a strong positive relationship. Larger homes tend to sell for more money.

## 1. Analysis of covariance model

```{r}
#| label: ancova

m3 <- lm(price ~ custom_build + sqft, data=alb)

m3 |>
  tidy() |>
  mutate(
    p.value =
      case_when(
        p.value <  0.001 ~ "< 0.001",
        p.value >= 0.001 ~ as.character(round(p.value, 3))))
```

## 1. Prediction without adjustment

```{r}
#| label: unadjusted prediction-1

alb |>
  group_by(custom_build) |>
  summarize(sqft=mean(sqft)) -> alb_2
alb_2
```

#### Comment on the code

To make an unadjusted prediction in the analysis of covariance model, you need to specify the two values for custom_build ("no" and "yes") along with the average sqft within each value of custom_build. This makes the "apples-to-oranges" nature of the unadjusted comparison more obvious.

```{r}
#| label: unadjusted prediction-2

augment(m3, newdata=alb_2)
```

#### Interpretation of the output

The predicted future value for a normal house with 1,500 square feet (the average size for normal houses) is 95 thousand dollars. The predicted future value for a custom-built house with 2,150 square feet (the average size for custom-built houses) is 145 thousand dollars. This matches the predicted future values from the model that did not include sqft as a covariate.

## Prediction with adjustment

```{r}
#| label: adjusted prediction-1

alb_2 |>
  mutate(sqft=mean(alb$sqft)) -> alb_3
alb_3
```

#### Comment on the code

To make an adjusted prediction, you replace the different mean square footage values by a single mean of all the data. 

```{r}
#| label: adjusted prediction-1

augment(m3, newdata=alb_3)
```

#### Interpretation of the output

The predicted future price of a normal house with a size of 1,650 square feet is 103 thousand dollars. The predicted future price of a custom-built house with a size of 1,650 square feet is 117 thousand dollars. The difference, 14 thousand dollars, matches the estimate from the analysis of covariance model.

## Graphical illustration

```{r}
#| label: illustration

b <- coef(m3)
x0 <- min(alb$sqft)
x1 <- max(alb$sqft)
x2 <- mean(alb$sqft[alb$custom_build=="no"])
x3 <- mean(alb$sqft[alb$custom_build=="yes"])
x4 <- mean(alb$sqft)
no_0  <- predict(m3, data.frame(sqft=x0, custom_build="no"))
yes_0 <- predict(m3, data.frame(sqft=x0, custom_build="yes"))
no_1  <- predict(m3, data.frame(sqft=x1, custom_build="no"))
yes_1 <- predict(m3, data.frame(sqft=x1, custom_build="yes"))
no_2  <- predict(m3, data.frame(sqft=x2, custom_build="no"))
yes_3 <- predict(m3, data.frame(sqft=x3, custom_build="yes"))
no_4  <- predict(m3, data.frame(sqft=x4, custom_build="no"))
yes_4 <- predict(m3, data.frame(sqft=x4, custom_build="yes"))

alb |>
  ggplot() +
  aes(x=sqft, y=price, label=custom_build, color=custom_build) +
  geom_text(size=2) +
  geom_segment(x=x0, y=no_0, xend=x1, yend=no_1) +
  geom_segment(x=x0, y=yes_0, xend=x1, yend=yes_1) +
  geom_label(x=x2, y=no_2, label=round(no_2)) +
  geom_label(x=x3, y=yes_3, label=round(yes_3)) +
  geom_label(x=x4, y=no_4, label=round(no_4)) +
  geom_label(x=x4, y=yes_4, label=round(yes_4)) +
  expand_limits(y=yes_1)
```

## Save everything

```{r}
#| label: save
save(
  alb,
  file="../data/module03.RData")
```