---
title: "Reading the Titanic dataset"
format: 
  html:
    embed-resources: true
execute: 
  error: true
editor: source
---

## File details

This program was written by Steve Simon on 2025-01-06 and is placed in the public domain. You can use this program any way you please.

This program reads data on mortality of passengers on the Titanic. Refer to the [data dictionary][ref01] for a more detailed description.

[ref01]: https://github.com/pmean/data/blob/main/files/titanic.yaml

```{r}
#| label: setup
#| message: false
#| warning: false
R.version.string
Sys.Date()
library(epitools)
library(glue)
library(tidyverse)
```

#### Documentation of the intermediate datasets

-   ti: Data as originally read in from the text file
-   ti_1: Convert survived to a factor
-   ti_2: Created new variable, third_class
-   ti_3: Created new variable, child
-   pclass_counts: counts and percentages for each passenger class
-   sex_survived_crosstab: counts for survived by sex

## Reading in the Titanic data set

```{r}
#| label: read
fn <- "../data/titanic.csv"
ti <- read_csv(fn,
  col_types="ccncn")
glimpse(ti)
```

## Peek at the bottom of the data

```{r}
#| label: tail
ti |>
  slice_tail(n=10)
```

#### Comments on the code

The [slice_tail][ref02] function (part of the dplyr/tidyverse libraries) displays one or more rows of data at the bottom of a data set. This is similar to the [tail][ref03] function in base R. 

For large files, it is often worthwhile to look at the bottom of dataset after you read it in. Often the first few rows of data look fine. but problems crop up in the middle of the file which distort the data from that point onward. Other times, you might find stray comments or extra blank lines at the end of a text file. You won't notice these problems if you don't look at the bottom of the file.

[ref02]: https://dplyr.tidyverse.org/reference/slice.html
[ref03]: https://stat.ethz.ch/R-manual/R-devel/library/utils/html/head.html

## Descriptive statistics on age

```{r}
#| label: age
ti |>
  summarize(
    age_mean=round(mean(age, na.rm=TRUE), 1),
    age_sd=round(sd(age, na.rm=TRUE), 1),
    age_min=min(age, na.rm=TRUE),
    age_max=max(age, na.rm=TRUE),
    age_missing=sum(is.na(age)))
```

#### Interpretation of the output

The average passenger on the Titanic was 30 years old. There is a wide variation in ages, with a standard deviation of 14 and a range of ages from 0.17 years (2 months) to 70 years.

## Counts and percentages

```{r}
#| label: pclass
ti |>
  count(pclass) |>
  mutate(total=sum(n)) |>
  mutate(pct=100*n/total) -> pclass_counts
pclass_counts
```

#### Comments on the code

The [count][ref04] function (part of the dplyr/tidyverse libraries) counts the number of observations in each level of a categorical variable. You can also use the [table][ref05] function in base R, which produces results in a slightly different format.

The [sum][ref06] function adds up all the values. When placed inside the mutate function, it creates a new column with the same sum beside each row. This allows us to compute a percentage later.

[ref04]: https://dplyr.tidyverse.org/reference/count.html
[ref05]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/table.html
[ref06]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html

## Nice looking percentages

```{r}
#| label: nice
pclass_counts |>
  mutate(pct=glue("{n}/{total} ({round(pct)}%)")) |>
  select(-n, -total)
```

#### Comments on the code

The [glue][ref07] function (part of the glue library) allows you to insert numbers into nicely formatted strings. You can also use the [paste and paste0][ref08] functions to do the same thing. If you are familiar with how C and C++ produces nicely formatted output, you might consider using the [sprintf][ref09] function.

[ref07]: https://glue.tidyverse.org/
[ref08]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html
[ref09]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/sprintf.html

#### Interpretation of the output

More than half of the passengers were in third class. Among the remaining passengers, there were slightly more first class than second class passengers.

## Bar chart with percents

```{r}
#| label: bar-percents
#| fig.width: 6
#| fig.height: 2.5
ticks <- c(10, 20, 30, 40, 50)
pclass_counts |>
  mutate(pct=100*n/total) |>
  ggplot() +
    aes(x=pclass, y=pct) +
    geom_col(color="black", fill="white") +
    ggtitle("Graph drawn by Steve Simon on 2025-01-16") +
    xlab("Passenger class") +
    ylab("Percentage") +
    scale_y_continuous(breaks=ticks, labels=glue("{ticks}%")) +
    coord_flip()
```

#### Comments on the code

The [geom_col][ref10] function (parts of the ggplot2/tidyverse libraries) draws a bar chart with a bar for each level of the "x" variable and where the height of each bar is defined by the "y" variable. Don't confuse this with the geom_bar function which displays the counts for each level of a categorical variable.

There is also a [barchart][ref11] function in the graphics library (part of base R) that you can use.

[ref10]: https://ggplot2.tidyverse.org/reference/geom_bar.html
[ref11]: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/barplot.html

## Creating factors, 1

```{r}
#| label: factors

ti |>
  mutate(
    survived=
      factor(
        survived, 
        levels=c(0, 1), 
        labels=c("dead", "alive"))) -> ti_1
```

#### Comments on the code

The [factor][ref12] function (part of base R), attaches descriptive labels to categorical data that otherwise might use cryptic number or letter codes.

In this code, I store any changes made to the original data as a new tibble. If you do this, document at the top of the program what change was made in the new file.

## Creating factors, 2

```{r}
#| label: survived

ti_1 |>
  count(survived) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Interpretation of the output

Things did not go well for the passengers of the Titanic. Only about a third of the passengers survived.

## Re-ordering categories

```{r}
#| label: re-order

ti_1 |>
  mutate(pclass=factor(pclass, levels=c("3rd", "2nd", "1st"))) |>
  count(pclass) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Comments on the code

When R processes strings, it will arrange them by default in alphabetical order. If you want a different order, use that preferred order in the levels argument of the factor function.

## Recoding categorical data, 1

```{r}
#| label: recode-pclass

ti_1 |>
  mutate(
    third_class=
      case_when(
        is.na(pclass) ~ "unknown",
        pclass=="1st" ~ "no",
        pclass=="2nd" ~ "no",
        pclass=="3rd" ~ "yes")) -> ti_2
```

#### Comments on the code

The [case_when][ref13] function (part of the dply/tidyverse libraries) will allow you to create a new variable based on various logical comparisons. You list a sequence of conditions on the left side of the tilde and the value that you want to assign if that condition is true on the right side of the tilde. The conditions are evaluated in sequence and the value chosen is the first logical comparison that evaluates to TRUE.

There are no missing values for pclass, but accounting for missing values as the first comparison is a good habit to get into.

[ref13]: https://dplyr.tidyverse.org/reference/case_when.html

## Recoding categorical data, 2

```{r}
#| label: count-third-class

ti_2 |>
  count(third_class) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Comments on the code

The [case_when][ref11] function (part of the dplyr/tidyverse libraries) creates a new variable or modifies an old variable based on a sequence of logical conditions.

[ref11]: https://dplyr.tidyverse.org/reference/case_when.html

#### Interpretation of the output

As noted earlier, a bit more than half of the passengers were in third class.

## Converting continuous data to categorical data, 1

```{r}
#| label: recode-age

ti_2 |>
  mutate(
    child=
      case_when(
        is.na(age) ~ "Unknown",
        age <= 0 ~ "Invalid",
        age < 18 ~ "Yes",
        TRUE ~ "No")) -> ti_3
```

## Converting continuous data to categorical data, 2

```{r}
#| label: count-child

ti_3 |>
  count(child) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Interpretation of the output

A large fraction (almost half) of the ages are missing. Of the non-missing ages, there were more than 7 times as many adults as children.

## Two way crosstabulation

```{r}
#| label: two-way

ti_3 |>
	count(sex, survived) -> sex_survived_crosstab
sex_survived_crosstab
```

## Overall percents

```{r}
#| label: overall

sex_survived_crosstab |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total))
```

## Percents by sex

```{r}
#| label: by-sex

sex_survived_crosstab |>
  group_by(sex) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  filter(survived=="alive") |>
  mutate(pct_survived=glue("{pct}% ({n}/{total})")) |>
  ungroup() |>
  select(survived, pct_survived)
```

## Percents by survived

```{r}
#| label: by-survived

sex_survived_crosstab |>
  group_by(survived) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  filter(sex=="female")  |>
  mutate(pct_female=glue("{pct}% ({n}/{total})")) |>
  ungroup() |>
  select(sex, pct_female)
```

## Arranged in a table

```{r}
#| label: table

sex_survived_crosstab |>
	pivot_wider(
		names_from="survived",
		values_from="n") -> sex_survived_crosstabtable
sex_survived_crosstabtable
```

## clustered bar chart, 1

```{r}
#| label: clustered-1

sex_survived_crosstab |>
	ggplot() +
	  aes(x=sex, y=n, fill=survived) +
    coord_flip() +
	  geom_col(
	    color="black",
	    position="dodge")
```

## clustered bar chart, 2

```{r}
#| label: clustered-2

sex_survived_crosstab |>
	ggplot() +
	  aes(x=sex, y=n, fill=survived) +
    coord_flip() +
	  geom_col(
	    color="black",
	    position="stack")
```

## Odds ratio

```{r}
#| label: or

oddsratio(x=ti_3$sex, y=ti_3$survived)
```

## Relative risk

```{r}
#| label: rr

riskratio(x=ti_3$sex, y=ti_3$survived)
```

