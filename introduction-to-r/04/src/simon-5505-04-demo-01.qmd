---
title: "Reading the Titanic dataset"
format: 
  html:
    embed-resources: true
execute: 
  error: true
editor: source
---

## File details

This program was written by Steve Simon on 2025-01-06 and is placed in the public domain. You can use this program any way you please.

This program reads data on mortality of passengers on the Titanic. Refer to the [data dictionary][ref01] for a more detailed description.

[ref01]: https://github.com/pmean/data/blob/main/files/titanic.yaml

```{r}
#| label: setup
#| message: false
#| warning: false
R.version.string
Sys.Date()
library(epitools)
library(glue)
library(tidyverse)
```

#### Documentation of the intermediate datasets

-   ti: Data as originally read in from the text file
-   ti_1: Convert survived to a factor
-   ti_2: Created new variable, third_class
-   ti_3: Created new variable, child
-   pclass_counts: counts and percentages for each passenger class
-   sex_survived_crosstab: counts for survived by sex

## Reading in the Titanic data set

```{r}
#| label: read
fn <- "../data/titanic.csv"
ti <- read_csv(fn,
  col_types="ccncn")
glimpse(ti)
```

## Peek at the bottom of the data

```{r}
#| label: tail
ti |>
  slice_tail(n=10)
```

#### Comments on the code

The [slice_tail][ref02] function (part of the dplyr/tidyverse libraries) displays one or more rows of data at the bottom of a data set. This is similar to the [tail][ref03] function in base R. 

For large files, it is often worthwhile to look at the bottom of dataset after you read it in. Often the first few rows of data look fine. but problems crop up in the middle of the file which distort the data from that point onward. Other times, you might find stray comments or extra blank lines at the end of a text file. You won't notice these problems if you don't look at the bottom of the file.

[ref02]: https://dplyr.tidyverse.org/reference/slice.html
[ref03]: https://stat.ethz.ch/R-manual/R-devel/library/utils/html/head.html

## Descriptive statistics on age

```{r}
#| label: age
ti |>
  summarize(
    age_mean=round(mean(age, na.rm=TRUE), 1),
    age_sd=round(sd(age, na.rm=TRUE), 1),
    age_min=min(age, na.rm=TRUE),
    age_max=max(age, na.rm=TRUE),
    age_missing=sum(is.na(age)))
```

#### Interpretation of the output

The average passenger on the Titanic was 30 years old. There is a wide variation in ages, with a standard deviation of 14 and a range of ages from 0.17 years (2 months) to 70 years.

## Counts and percentages

```{r}
#| label: pclass
ti |>
  count(pclass) |>
  mutate(total=sum(n)) |>
  mutate(pct=100*n/total) -> pclass_counts
pclass_counts
```

#### Comments on the code

The [count][ref04] function (part of the dplyr/tidyverse libraries) counts the number of observations in each level of a categorical variable. You can also use the [table][ref05] function in base R, which produces results in a slightly different format.

The [sum][ref06] function adds up all the values. When placed inside the mutate function, it creates a new column with the same sum beside each row. This allows us to compute a percentage later.

[ref04]: https://dplyr.tidyverse.org/reference/count.html
[ref05]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/table.html
[ref06]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html

## Nice looking percentages

```{r}
#| label: nice
pclass_counts |>
  mutate(pct=glue("{n}/{total} ({round(pct)}%)")) |>
  select(-n, -total)
```

#### Comments on the code

The [glue][ref07] function (part of the glue library) allows you to insert numbers into nicely formatted strings. You can also use the [paste and paste0][ref08] functions to do the same thing. If you are familiar with how C and C++ produces nicely formatted output, you might consider using the [sprintf][ref09] function.

[ref07]: https://glue.tidyverse.org/
[ref08]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html
[ref09]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/sprintf.html

#### Interpretation of the output

More than half of the passengers were in third class. Among the remaining passengers, there were slightly more first class than second class passengers.

## Bar chart with percents

```{r}
#| label: bar-percents
#| fig.width: 6
#| fig.height: 2.5
ticks <- c(10, 20, 30, 40, 50)
pclass_counts |>
  mutate(pct=100*n/total) |>
  ggplot() +
    aes(x=pclass, y=pct) +
    geom_col(color="black", fill="white") +
    ggtitle("Graph drawn by Steve Simon on 2025-01-16") +
    xlab("Passenger class") +
    ylab("Percentage") +
    scale_y_continuous(breaks=ticks, labels=glue("{ticks}%")) +
    coord_flip()
```

#### Comments on the code

The [geom_col][ref10] function (parts of the ggplot2/tidyverse libraries) draws a bar chart with a bar for each level of the "x" variable and where the height of each bar is defined by the "y" variable. Don't confuse this with the geom_bar function which displays the counts for each level of a categorical variable.

There is also a [barchart][ref11] function in the graphics library (part of base R) that you can use.

[ref10]: https://ggplot2.tidyverse.org/reference/geom_bar.html
[ref11]: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/barplot.html

## Creating factors, 1

```{r}
#| label: factors
ti |>
  mutate(
    survived=
      factor(
        survived, 
        levels=c(0, 1), 
        labels=c("dead", "alive"))) -> ti_1
```

#### Comments on the code

The [factor][ref12] function (part of base R), attaches descriptive labels to categorical data that otherwise might use cryptic number or letter codes.

In this code, I store any changes made to the original data as a new tibble. If you do this, document at the top of the program what change was made in the new file.

[ref12]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html

## Creating factors, 2

```{r}
#| label: survived
ti_1 |>
  count(survived) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Interpretation of the output

Things did not go well for the passengers of the Titanic. Only about a third of the passengers survived.

## Re-ordering categories

```{r}
#| label: re-order
ti_1 |>
  mutate(pclass=factor(pclass, levels=c("3rd", "2nd", "1st"))) |>
  count(pclass) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Comments on the code

When R processes strings, it will arrange them by default in alphabetical order. If you want a different order, use that preferred order in the levels argument of the factor function.

## Recoding categorical data, 1

```{r}
#| label: recode-pclass
ti_1 |>
  mutate(
    third_class=
      case_when(
        is.na(pclass) ~ "unknown",
        pclass=="1st" ~ "no",
        pclass=="2nd" ~ "no",
        pclass=="3rd" ~ "yes")) -> ti_2
```

#### Comments on the code

The [case_when][ref13] function (part of the dply/tidyverse libraries) will allow you to create a new variable based on various logical comparisons. You list a sequence of conditions on the left side of the tilde and the value that you want to assign if that condition is true on the right side of the tilde. The conditions are evaluated in sequence and the value chosen is the first logical comparison that evaluates to TRUE.

There are no missing values for pclass, but accounting for missing values as the first comparison is a good habit to get into.

[ref13]: https://dplyr.tidyverse.org/reference/case_when.html

## Recoding categorical data, 2

```{r}
#| label: count-third-class
ti_2 |>
  count(third_class) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Comments on the code

The [case_when][ref14] function (part of the dplyr/tidyverse libraries) creates a new variable or modifies an old variable based on a sequence of logical conditions.

[ref14]: https://dplyr.tidyverse.org/reference/case_when.html

#### Interpretation of the output

As noted earlier, a bit more than half of the passengers were in third class.

## Converting continuous data to categorical data, 1

```{r}
#| label: recode-age
ti_2 |>
  mutate(
    child=
      case_when(
        is.na(age) ~ "Unknown",
        age <= 0 ~ "Invalid",
        age < 18 ~ "Yes",
        TRUE ~ "No")) -> ti_3
```

#### Comments on the code

Notice again how you should check for missing values first. The code also checks for zero or negative ages (although there aren't any) just because it is a good habit you should develop.

## Converting continuous data to categorical data, 2

```{r}
#| label: count-child
ti_3 |>
  count(child) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  mutate(pct=glue("{n}/{total} ({pct}%)")) |>
  select(-n, -total)
```

#### Interpretation of the output

A large fraction (almost half) of the ages are missing. Of the non-missing ages, there were more than 7 times as many adults as children.

## Two way crosstabulation

```{r}
#| label: two-way
ti_3 |>
	count(sex, survived) -> sex_survived_crosstab
sex_survived_crosstab
```

#### Comments on the code

The count function can also work with two (or more arguments). In this example, it calculates every possible combination of sex and survived:

-   female died
-   female alive
-   male died
-   male alive

#### Interpretation of the output.

The largest group on the Titanic was male deaths. There were only about half as many female survivors. The smallest counts were male survivors and female deaths.

## Arranged in a table

```{r}
#| label: table
sex_survived_crosstab |>
	pivot_wider(
		names_from="survived",
		values_from="n") -> sex_survived_crosstabtable
sex_survived_crosstabtable
```

#### Comments on the code

The [pivot_wider][ref15] function (part of the dplyr/tidyverse libraries) will spread data across multiple columns. In this case, it places the counts of the survivors in one column and places the counts of the deaths in a separate column. This produces a rectangular format that most other statistical software programs use. In fact, the table function with two arguments will also produce the table you see here. There's a subtle difference, though. The table function produces an array rather than a tibble.

If you wanted the counts for males in one column and the counts for females in a separate column, change the names from argument from "survived" to "sex".

[ref15]: https://tidyr.tidyverse.org/reference/pivot_wider.html

## Overall percents

```{r}
#| label: overall
sex_survived_crosstab |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total))
```

#### Comments on the code

There are three different percentages that you can calculate for this table. The first mutate command places the grand total (1,313) in each row of the data and the second mutate command computes a percentage. For the sake of simplicity, I did not use the glue function to create a nice display for these percentage.

## Percents by sex

```{r}
#| label: by-sex
sex_survived_crosstab |>
  group_by(sex) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  filter(survived=="alive") |>
  mutate(pct_survived=glue("{pct}% ({n}/{total})")) |>
  ungroup() |>
  select(survived, pct_survived)
```

#### Comments on the code

The [group_by][ref16] function (part of the dplyr/tidyverse libraries) creates a grouped tibble. A grouped tibble is a modification of the tibble that allows you to make calculations across subsets. In this case, the mutate function immediately following the group_by statement calculates separate totals for male and female passengers. This produces a set of conditional probabilities, the probability of death/survival separately for males and females. 

Since death/survival is a binary event, you do not need to display both. The filter command keeps the survival probabilities and drops the death probabilities.

[ref16]: https://dplyr.tidyverse.org/reference/group_by.html

#### Interpretation of the output

Most of the female passengers survived, about two out of every three. Very few male passengers survived, about one out of every six.

## Percents by survived

```{r}
#| label: by-survived
sex_survived_crosstab |>
  group_by(survived) |>
  mutate(total=sum(n)) |>
  mutate(pct=round(100*n/total)) |>
  filter(sex=="female")  |>
  mutate(pct_female=glue("{pct}% ({n}/{total})")) |>
  ungroup() |>
  select(survived, pct_female)
```

#### Comments on the code

Using survived as the argument in the group_by function creates a different set of conditional probabilities, The probability of being a male or female passenger given that you survived or given that you died.

#### Interpretation of the output

Only a small percentage of deaths (less than one in five) was female deaths. Among survivors, more than two-thrids were female.

## clustered bar chart, 1

```{r}
#| label: clustered-1
sex_survived_crosstab |>
	ggplot() +
	  aes(x=sex, y=n, fill=survived) +
    coord_flip() +
	  geom_col(
	    color="black",
	    position="dodge")
```

#### Comments on the code

The geom_col function can produce clustered bar charts. The cluster is defined by the fill argument in the aes function. The position="dodge" argument inside the geom_col function tells R that you want the clustered bars to appears side by side.

#### Interpretation of the output

The largest bar with a count of over 700 is for male deaths. The next largest bar, slighltly more than 300 is for female survivors. The two smallest bars around 150 passengers each are for male survivors and female deaths.

## clustered bar chart, 2

```{r}
#| label: clustered-2

sex_survived_crosstab |>
	ggplot() +
	  aes(x=sex, y=n, fill=survived) +
    coord_flip() +
	  geom_col(
	    color="black",
	    position="stack")
```

#### Comments on the code

If you replace position="dodge" with position= "stack", the bars are placed on the left and right of each other (or top and bottom if you didn't use coord_flip). This makes for a slightly different interpretation.

#### Interpretation of the output

The vast majority of male passengers died, while most of the female passengers survived.

## Odds ratio

```{r}
#| label: or

oddsratio(x=ti_3$sex, y=ti_3$survived)
```

#### Comments on the code

The [oddsratio][ref17] function (part of the epitools package) uses a bit different syntax. It does not have a data= argument and that means that you need to specify both the tibble and the variable separated by a dollar sign. This also makes it difficult for you to include this function inside a series of pipes. 

This is common for many libraries (and for major parts of base R) and is a glaring inconsistency in the R language.

[ref17]: https://cran.r-project.org/web/packages/epitools/epitools.pdf

#### Interpretation of the output

The odds of survival is ten times lower for males than females. The confidence interval excludes the value of 1, so there is a statistically significant decrease in risk of survival for male passengers compared to female passengers.

## Relative risk

```{r}
#| label: rr

riskratio(x=ti_3$sex, y=ti_3$survived)
```

#### Comments on the code

The riskratio function is also part of the epitools library and is documented in the previous link.

#### Interpretation of the output

The probability of survival is four times lower for males than females. Notice that this is quite different from the odds ratio. When to use the odds ratio and when to use the relative risk is well beyond the scope of this class. I have an [informal explanation][ref18] of the issues involved on my website that happens to use this same dataset as one of the illustrative examples.

The confidence interval excludes the value of 1, so there is a statistically significant decrease in risk of survival for male passengers compared to female passengers.

[ref18]: http://www.new.pmean.com/or-vs-rr/