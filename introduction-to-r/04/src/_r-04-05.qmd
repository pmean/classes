---
title: "r-04-05, New categorical variables"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## New categorical variables

```{r recode-simple}
ti$child <- case_when(
  is.na(ti$Age) ~ "Unknown",
  ti$Age <=  0   ~ "Invalid",
  ti$Age <  18    ~ "Yes",
  ti$Age >= 18    ~ "No")
table(ti$child, useNA="always")
```

::: notes

There are several ways to create a new categorical variable in R, but the easiest way is through the use of logical comparisons.

Suppose you wanted to compute a categorical variable called "child" which is equal to 1 if a passenger is less than 18 years old and 0 if a passenger is 18 or older. Here's one way to do it.

:::

## Quality check for child

```{r recode-child-check}
range(ti$Age[ti$child=="No"])
range(ti$Age[ti$child=="Yes"])
table(ti$Age[ti$child=="Unknown"], useNA="always")
```

::: notes

Anytime you create a new categorical variable, you should run a quality check to make sure nothing is wrong. The range function is useful for this.

:::

## More on recoding

```{r recode-combine-code}
ti$lower_class <- case_when(
  is.na(ti$PClass) ~ "Unknown",
  ti$PClass=="1st" ~ "No",
  ti$PClass=="2nd" ~ "Yes",
  ti$PClass=="3rd" ~ "Yes")
```

::: notes

Sometimes you want to combine two or more of the categories together. Here is how you might create a new passenger class variable with values of 1 for second and third class and 0 for first class.

:::

## More on recoding, output

```{r recode-combine-output}
table(
  ti$lower_class,
  ti$PClass, 
  useNA="always")
```

::: notes

As before, it's a good a idea to run a crosstabulation to verify that the new coding was done properly.

:::

## Creating multi-level categories, code

```{r recode-cut-code}
ti$age_groups <- case_when(
  is.na(ti$Age) ~ "Missing",
  ti$Age <= 0   ~ "Invalid",
  ti$Age <= 1.5 ~ "Infant",
  ti$Age <= 12  ~ "Child",
  ti$Age <= 19  ~ "Teenager",
  ti$Age >  19  ~ "Adult")
```

::: notes

Here's a more complex example. Notice that I check instinctively for invalid values.

:::

## Creating multi-level categories, output

```{r recode-cut-output}
table(ti$age_groups, useNA="always")
```

::: notes

These are the counts for each of the age groups.

:::

## Quality check

```{r qc}
range(ti$Age[ti$age_groups=="Infant"])
range(ti$Age[ti$age_groups=="Child"])
range(ti$Age[ti$age_groups=="Teenager"])
range(ti$Age[ti$age_groups=="Adult"])
```

::: notes

Notice that the ages are consistent with our expectations. A table like this is nice documentation, since decisions about who is an adult (18 and older? 21 and older?) are sometimes forgotten.

:::

## Summary
+ What have you learned
  + Reading in the Titanic dataset
  + Categorical versus continuous variables
  + Counts, proportions, and percentage
  + Factors
  + Crosstabulations
  + Barplots
  + New categorical variables

```{r save-image, echo=FALSE}
save.image("../data/slides04.RData")
```
