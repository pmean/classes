---
title: "r-01-02, TBA-2"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Categorical versus continuous variables

+ Categorical
  + Small number of possible values
  + Each value has a name or label
+ Continuous
  + Large number of possible values
  + Potentially any value in a range.
  
::: notes

A categorical variable is defined (loosely) as a variable that has a small number of possible values. Each value is usually associated with a particular category or label. In contrast, a continuous variable is defined as a variable that has a large number of possible values, potentially any value in a particular interval.

In a previous module, almost all of the variables that you used were continuous. Today, almost all of the variables that you will use will be categorical.

The distinction between continuous and categorical variables is important in deciding what types of descriptive and inferential statistics you should use. But, there is often gray and fuzzy line between categorical and continuous variables. Don't worry too much about this today. If you're not sure whether a variable is categorical or continuous, try some simple descriptive statistics and graphs appropriate for categorical data and then try some simple descriptive statistics and graphs for continuous data. You will usually figure out quickly whehther treating your variable as categorical or continuous makes the most sense.

There are other types of variables also, such as count variables, that have their own special features.

:::

## Freqency counts

```{r table-simple}
PClass_counts <- table(ti$PClass)
PClass_counts
```

::: notes

For categorical variables, you should first get frequency counts. A mean and standard deviation are usually meaningless for categorical data.

Unlike most other statistical packages, R tends to have a minimalist approach to statistics. If you asked for frequency counts in SAS or SPSS, these systems would automatically add percentages. R doesn't add percentages automatically.

This is something that you will either love or hate. You might think that SAS and SPSS are more thoughtful because almost every time you want a count, you'd also want the corresponding percentage. Or you might find it annoying to tell those programs to not clutter up your output with information you didn't want.

Personally, I don't like software deciding for me what I want. I'd rather ask for percentages explicitly when I need them rather than have them come as the default.

Now this is a rather trivial issue, but it does illustrate an important difference in philosophy. R makes you ask for the extras that you might need. SAS and SPSS force you to ask to NOT include things that they think are important.

So the table function produces only counts. 

:::

## Proportions

```{r table-proportion}
PClass_proportions <-
  prop.table(PClass_counts)
PClass_proportions
```

::: notes

If you want percentages in addition to counts, there are several approaches.

The prop.table function takes a frequency table and converts it to a proportion.

:::

## Percentages

```{r table-pct}
PClass_percents <- 
  round(100*PClass_proportions)
PClass_percents
```

::: notes

Multiply by 100 and round to get percentages.

:::

## Percentages

```{r table-pct-sign}
pct.sign <- "%"
PClass_nice_percents <- 
  paste0(PClass_percents, pct.sign)
PClass_nice_percents
```

::: notes

You can get even fancier. The paste function concatenates several string variables and if something is not a string, R will convert it to a string before concatenating.

:::

## Percentages

```{r table-names}
colon <- ": "
PClass_nicest_percents <- 
  paste0(
    names(PClass_percents), 
    colon,
    PClass_percents, 
    pct.sign)
PClass_nicest_percents
```

::: notes

Somehow, the names of the passenger class got lost. So let's add them back in. A colon and a space between the names and the numbers helps as well.

:::

## Fractions and percentages

```{r fractions}
n  <- sum(PClass_counts)
slash <- "/"
comma <- ", "
percents_and_fractions <- paste0(
  PClass_nicest_percents, comma,
  PClass_counts, slash, n)
percents_and_fractions
```

::: notes

Finally, you can combine the counts and the total with the percents to make things look really nice.

This shows how I like to program in R. First, get something simple. Then slowly add layers to it until you get a nice polished product.

In contrast, most other statistical packages try to produce polished results right from the start. This has some advantages, but the approach used by R, where many of the functions do something simple and basic, allows you to polish the results the way you want them.

:::

## Tables that include counts of missing values.

```{r table-usena}
PClass_missing <- 
  table(ti$PClass, useNA="always")
PClass_missing
```

::: notes

The default option in the table function is to not list missing values. During the intitial data screening, you should always look for missing values. This is done with the useNA parameter.

:::

## Total count

```{r table-addmargins}
PClass_total <- 
  addmargins(PClass_missing)
PClass_total
```

::: notes

You can add a total count to the frequency table with the addmargins function.

:::

## An alternative approach to counts and percentages (1/6)

```{r alt-1}
pclass_count <- 
  count(ti, PClass)
pclass_count
```

## An alternative approach to counts and percentages (2/6)

```{r alt-2}
pclass_totals <- 
  mutate(pclass_count, total=sum(n))
pclass_totals
```

## An alternative approach to counts and percentages (3/6)

```{r alt-3}
pclass_percents <- 
  mutate(
    pclass_totals, 
    pct=round(100*n/total))
```

## An alternative approach to counts and percentages (4/6)

```{r alt-4}
pclass_percents
```

## An alternative approach to counts and percentages (5/6)

```{r alt-5}
pclass_nice_percents <- 
  mutate(
    pclass_percents, 
    pct=
      paste0(
        pct, "% (", n, "/", total, ")"))
```

## An alternative approach to counts and percentages (6/6)

```{r alt-6}
select(pclass_nice_percents, PClass, pct)
```

## One more

```{r alt-7}
pclass_nice_percents %>%
  select(PClass, pct) %>%
  pivot_wider(names_from=PClass, values_from=pct)
```

## Break #2
+ What have you learned
  + Categorical versus continuous variables
  + Counts, proportions, and percentage
+ What's next
  + Factors
  + Crosstabulations

## Factors

```{r factors}
ti$surv_factor <- 
  factor(
    ti$Survived, 
    levels=0:1, 
    labels=c("No","Yes"))
table(ti$surv_factor)
```

::: notes

The factor function is similar to the variable label in SPSS and the format statement in SAS. It assigns category names (No and Yes) to numeric codes (0 and 1). It also has other features that are helpful in linear and logistic regression models, such as the ability to specify contrasts.

:::

## Crosstabulation

```{r crosstabs1}
pclass_by_gender <- 
  table(ti$PClass, ti$Sex)
pclass_by_gender
```

::: notes

A crosstabulation shows counts across the combination of two different categorical variables. This table shows that there are `r pclass_by_gender[1, 1]` female first class passengers, `r pclass_by_gender[1, 2]` male first class passengers, `r pclass_by_gender[2, 1]` female second class passengers, etc.

:::

## Row proportions, code

```{r row_proportions}
row_proportions <- 
  prop.table(
    pclass_by_gender, 
    margin=1)
```

::: notes

The prop.table function converts counts into proportions. Use margin=1 to get row proportions.

:::

## Row proportions, output

```{r display-row-proportions}
row_proportions
```

::: notes

Row proportions add up to 1 within each row.

:::

## Row percentages

```{r row_pcts}
row_pcts <- round(100*row_proportions)
row_pcts
```

::: notes

It is a lot easier to read if you convert the proportions into percentages and then round. In first class, `r row_pcts[1, 1]`% of the passengers are female. In second class, `r row_pcts[2, 1]`% are female, and so forth.

:::

## Column percentages, code

```{r compute-column-percentages}
col_proportions <- 
  prop.table(
    pclass_by_gender,
    margin=2)
col_pcts <- round(100*col_proportions)
```

::: notes

Setting the margin parameter to 2 gives column proportions.

:::

## Column percentages, output

```{r display-column-percentages}
col_pcts
```

::: notes

Column proportions add up to 1 within each column. Again, converting to percents and rounding helps a lot. Among the female passengers, `r col_pcts[1, 1]`% traveled in first class, `r col_pcts[2, 1]`% in second class, and `r col_pcts[3, 1]`% in third class.

:::

## Cell percentages, code

```{r cell_pcts-code}
cell_proportions <- 
  prop.table(pclass_by_gender)
cell_pcts <- 
  round(100*cell_proportions)
```

::: notes

If you omit the margin parameter, R produces cell proportions.

:::

## Cell percentages, output

```{r cell-pcts-output}
cell_pcts
```

::: notes

Cell proportions add up to 1 across all the cells in the table. Converting to percents, you can see that `r cell_pcts[1, 1]`% of the passengers were first class femles, `r cell_pcts[1, 2]`% were first class males, `r cell_pcts[2, 1]`% were second class females, etc.

:::

## Which percentages should you use

+ General guidance
  + Set the rows to your treatment/exposure 
  + Set the columns to your outcome
  + Compute row percentages
+ why not try several formats
  + Revised your tables as often as you revise your writing
  
::: notes

It's beyond the scope of this class, but with crosstabulations, you have choices as to what should be the rows and what should be the columns. Then you can compute row, column, or cell percentages.

I've found that nine times out of ten, the best choice depends on what is your treatment variable and what is your outcome. It usually works best if you place the treatment variable in the rows and the outcome in the columns and compute row percentages. That shows how often you see a particular outcome in the treatment group and the percentage in the control group is right beneath it.

That being said, I would also encourage you to try several different approaches.

:::

## Practical example, code

```{r survival-chart}
gender_by_survival <- 
  table(ti$Sex, ti$surv_factor)
survival_proportions <- 
  prop.table(
    gender_by_survival, 
    margin=1)
survival_percents <- 
  round(100*survival_proportions)
```

## Practical example, output

```{r survival_percents}
survival_percents
```

::: notes

The key question in the Titanic dataset is survival. Who lived and who died. Kate Winslet lived, but sad to say, Leonardo diCaprio didn't. So what was the survival rate for all women? For all men?

Using the rules shown on the previous slide, survival is obviously the outcome. Make that the columns and gender the rows. Then compute row percentages (margin=1).

For this, you can see that `r survival_percents[1, 2]`% of the women survived, but only `r survival_percents[2, 2]`% of the men did.

:::

## Break #3
+ What have you learned
  + Factors
  + Crosstabulations
+ What's next
  + Barplots

## Barplot of counts, code

```{r barplot1}
simple_barplot <- 
  ggplot(ti, aes(x=PClass)) + 
    geom_bar()
ggsave(
  "../images/barplot1.png", 
  simple_barplot)
```

::: notes

I'm not a big fan of bar plots, but they sometimes have their uses. You can get a barplot for the frequency count.

Because of the way Rmarkdown displays graphs, I have to put the code on a separate slide from the graph.

:::

## Barplot of counts, graph

![Barplot of counts](../images/barplot1.png)

::: notes

Here is what the plot looks like.

:::


## Barplot of percentages, code

```{r barplot2}
percentages_barplot <- 
  ggplot(ti, aes(x=PClass)) + 
    geom_bar(aes(weight=100/n))
ggsave(
  "../images/barplot2.png", 
  percentages_barplot)
```

::: notes

Use weights to get a bar chart of percentages.

:::

## Barplot of proportions, graph

![Barplot of proportions](../images/barplot2.png)

::: notes

Here is what the plot looks like.

:::

## Barplot of percentages, code

```{r barplot3}
labeled_barplot <- 
  percentages_barplot +
    scale_y_continuous(
      "Percent", 
      breaks=c(0, 20, 40), 
      labels=c("0%", "20%", "40%"))
ggsave(
  "../images/barplot3.png", 
  labeled_barplot)
```

::: notes

You can control how the y-axis is labeled with the scale_y_continuous function.

:::

## Barplot of counts, graph

![Barplot of counts](../images/barplot3.png)

::: notes

Here is what the plot looks like.

:::

## Break #4
+ What have you learned
  + Barplots
+ What's next
  + New categorical variables

## New categorical variables

```{r recode-simple}
ti$child <- case_when(
  is.na(ti$Age) ~ "Unknown",
  ti$Age <=  0   ~ "Invalid",
  ti$Age <  18    ~ "Yes",
  ti$Age >= 18    ~ "No")
table(ti$child, useNA="always")
```

::: notes

There are several ways to create a new categorical variable in R, but the easiest way is through the use of logical comparisons.

Suppose you wanted to compute a categorical variable called "child" which is equal to 1 if a passenger is less than 18 years old and 0 if a passenger is 18 or older. Here's one way to do it.

:::

## Quality check for child

```{r recode-child-check}
range(ti$Age[ti$child=="No"])
range(ti$Age[ti$child=="Yes"])
table(ti$Age[ti$child=="Unknown"], useNA="always")
```

::: notes

Anytime you create a new categorical variable, you should run a quality check to make sure nothing is wrong. The range function is useful for this.

:::

## More on recoding

```{r recode-combine-code}
ti$lower_class <- case_when(
  is.na(ti$PClass) ~ "Unknown",
  ti$PClass=="1st" ~ "No",
  ti$PClass=="2nd" ~ "Yes",
  ti$PClass=="3rd" ~ "Yes")
```

::: notes

Sometimes you want to combine two or more of the categories together. Here is how you might create a new passenger class variable with values of 1 for second and third class and 0 for first class.

:::

## More on recoding, output

```{r recode-combine-output}
table(
  ti$lower_class,
  ti$PClass, 
  useNA="always")
```

::: notes

As before, it's a good a idea to run a crosstabulation to verify that the new coding was done properly.

:::

## Creating multi-level categories, code

```{r recode-cut-code}
ti$age_groups <- case_when(
  is.na(ti$Age) ~ "Missing",
  ti$Age <= 0   ~ "Invalid",
  ti$Age <= 1.5 ~ "Infant",
  ti$Age <= 12  ~ "Child",
  ti$Age <= 19  ~ "Teenager",
  ti$Age >  19  ~ "Adult")
```

::: notes

Here's a more complex example. Notice that I check instinctively for invalid values.

:::

## Creating multi-level categories, output

```{r recode-cut-output}
table(ti$age_groups, useNA="always")
```

::: notes

These are the counts for each of the age groups.

:::

## Quality check

```{r qc}
range(ti$Age[ti$age_groups=="Infant"])
range(ti$Age[ti$age_groups=="Child"])
range(ti$Age[ti$age_groups=="Teenager"])
range(ti$Age[ti$age_groups=="Adult"])
```

::: notes

Notice that the ages are consistent with our expectations. A table like this is nice documentation, since decisions about who is an adult (18 and older? 21 and older?) are sometimes forgotten.

:::

## Summary
+ What have you learned
  + Reading in the Titanic dataset
  + Categorical versus continuous variables
  + Counts, proportions, and percentage
  + Factors
  + Crosstabulations
  + Barplots
  + New categorical variables

```{r save-image, echo=FALSE}
save.image("../data/slides04.RData")
```
