---
title: "Reading the Titanic dataset"
format: 
  html:
    embed-resources: true
execute: 
  error: true
editor: source
---

## File details

This program was written by Steve Simon on 2025-01-06 and is placed in the public domain. You can use this program any way you please.

This program reads data on mortality of passengers on the Titanic. Refer to the [data dictionary][ref01] for a more detailed description.

[ref01]: https://github.com/pmean/data/blob/main/files/titanic.yaml

```{r}
#| message: false
#| warning: false
#| label: setup

R.version.string
Sys.Date()
library(epitools)
library(glue)
library(tidyverse)
```

#### Documentation of the intermediate datasets

-   ti: Data from titanic.csv
-   ti_1: Convert survived to a factor
-   ti_2: Created new variable, child
-   ti_3: Created new variable, third_class

# --- Begin Part 1 ---

## Reading in the Titanic data set

```{r}
#| label: read-ti

fn <- "../data/titanic.csv"
ti <- read_csv(fn,
  col_types="ccncn")
glimpse(ti)
```

## Peek at the bottom of the data

```{r}
#| label: tail-ti

ti |>
  slice_tail(n=10)
```

#### Comments on the code

The [slice_tail][ref02] function (part of the dplyr/tidyverse libraries) displays one or more rows of data at the bottom of a data set. This is similar to the [tail][ref03] function in base R. 

For large files, it is often worthwhile to look at the bottom of dataset after you read it in. Often the first few rows of data look fine. but problems crop up in the middle of the file which distort the data from that point onward. Other times, you might find stray comments or extra blank lines at the end of a text file. You won't notice these problems if you don't look at the bottom of the file.

[ref02]: https://dplyr.tidyverse.org/reference/slice.html
[ref03]: https://stat.ethz.ch/R-manual/R-devel/library/utils/html/head.html

## Descriptive statistics on age

```{r}
#| label: age-ti

ti |>
  summarize(
    age_mean=round(mean(age, na.rm=TRUE), 1),
    age_sd=round(sd(age, na.rm=TRUE), 1),
    age_min=min(age, na.rm=TRUE),
    age_max=max(age, na.rm=TRUE),
    age_missing=sum(is.na(age)))
```

#### Interpretation of the output

The average passenger on the Titanic was 30 years old. There is a wide variation in ages, with a standard deviation of 14 and a range of ages from 0.17 years (2 months) to 70 years.

## More information on the extremes

```{r}
#| label: extremes-ti

ti |>
  slice_min(age, na_rm=TRUE)

ti |>
  slice_max(age, na_rm=TRUE)
```

#### Comments on the code

The [slice_min][ref-slice-nodate] function is part of the dplyr/tidyverse library. It will select the row or rows of a data frame or tibble that have the smallest value for a particular variable. The slice_max function does the same for the largest value. Note the use of the na_rm argument, which is inconsistent with the na.rm argument found in the min and max functions.

[ref-slice-nodate]: https://dplyr.tidyverse.org/reference/slice.html

#### Interpretation of the output

The youngest passenger, a female in third class, survived. There were three passengers tied for the oldest. All were men in first or second class and all of them died.

# --- Begin Part 2 ---

## Creating factors

```{r}
#| label: factors-ti

ti |>
  mutate(
    survived=
      factor(
        survived, 
        levels=c(0, 1), 
        labels=c("dead", "alive"))) -> ti_1
```

#### Comments on the code

(Add a discussion of the factor function. Note that we are modifying an existing variable instead of creating a new variable.)

## Counts and percentages

```{r}
#| label: counts-ti

ti_1 |>
  count(pclass) |>
  mutate(total=sum(n)) |>
  mutate(pct=100*n/total) |>
  mutate(pct=glue("{n}/{total} ({round(pct)}%)")) |>
  select(-n, -total)
```

#### Comments on the code

The [count][ref04] function (part of the dplyr/tidyverse libraries) counts the number of observations in each level of a categorical variable. You can also use the [table][ref05] function in base R, which produces results in a slightly different format.

[ref04]: https://dplyr.tidyverse.org/reference/count.html
[ref05]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/table.html

The [sum][ref06] function adds up all the values. When placed inside the mutate function, it creates a new column with the same sum beside each row. This allows us to compute a percentage later.

[ref06]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html

The [glue][ref07] function (part of the glue library) allows you to insert numbers into nicely formatted strings. You can also use the [paste and paste0][ref08] functions to do the same thing. If you are familiar with how C and C++ produces nicely formatted output, you might consider using the [sprintf][ref09] function.

[ref07]: https://glue.tidyverse.org/
[ref08]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html
[ref09]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/sprintf.html

#### Interpretation of the output

More than half of the passengers were in third class. Among the remaining passengers, there were slightly more first class than second class passengers.

# --- Begin Part 3 ---

## Crosstabulation

```{r}
#| label: xtabs-1

ti_1 |>
	count(pclass, survived)
```

#### Comments on the code

A crosstabulation shows counts across the combination of two different categorical variables. Although I prefer the count function, you can use the [table][ref-table-nodate] function or the [xtabs][ref-xtabs-nodate] function.

The latter two functions produce the counts in a rectangular format. But both work poory with many of the tidyverse functions.

[ref-table-nodate]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/table.html

[ref-xtabs-nodate]: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/xtabs.html

## Conditional probabilities

```{r}
#| label: conditional

ti_1 |>
  count(sex, survived) |>
	group_by(sex) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) |>
	mutate(
		pct=
			glue("{n}/{total} ({pct}%)")) |>
	select(-n, -total) |>
  pivot_wider(
    names_from=survived,
    values_from=pct)
```

::: notes

The key question in the Titanic dataset is survival. Who lived and who died. Kate Winslet lived, but sad to say, Leonardo diCaprio did not. So what was the survival rate for all women? For all men?

Using the rules shown on the previous slide, survival is obviously the outcome. Make that the columns and gender the rows. Then compute row percentages.

For this, you can see that two-thirds of the women survived, but only one out of six men did.

:::

# --- Begin Part 4 ---

## Bar chart with percents

```{r}
#| fig.width: 6
#| fig.height: 2.5
#| label: bar-percents

ticks <- seq(from = 0, to = 50, by = 10)

ti |>
  count(pclass) |>
  mutate(total = sum(n)) |>
  mutate(pct = round(100*n/total)) |>
  ggplot() +
  aes(x=pclass, y=pct) +
  geom_col(color="black", fill="white") +
  ggtitle("Graph drawn by Steve Simon on 2025-01-16") +
  xlab("Passenger class") +
  ylab("Percentage") +
  scale_y_continuous(
  	breaks=ticks, 
  	labels=glue("{ticks}%")) +
  coord_flip()
```

#### Comments on the code

The [geom_col][ref10] function (parts of the ggplot2/tidyverse libraries) draws a bar chart with a bar for each level of the "x" variable and where the height of each bar is defined by the "y" variable. Don't confuse this with the geom_bar function which displays the counts for each level of a categorical variable.

There is also a [barchart][ref11] function in the graphics library (part of base R) that you can use.

[ref10]: https://ggplot2.tidyverse.org/reference/geom_bar.html
[ref11]: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/barplot.html



# --- Begin Part 5 ---

## New categorical variables

```{r}
#| label: recode-1

ti_1 |>
	mutate(child=case_when(
    is.na(age) ~ "Unknown",
    age <=  0  ~ "Invalid",
    age >= 91  ~ "Invalid",
    age <  18  ~ "Yes",
    age >= 18  ~ "No")) -> ti_2
```

#### Comments on the code

The [case_when][ref-case-nodate] function uses a series of logic commands to 

There are several ways to create a new categorical variable in R, but the easiest way is through the use of logical comparisons.

Suppose you wanted to compute a categorical variable called "child" which is equal to 1 if a passenger is less than 18 years old and 0 if a passenger is 18 or older. Here's one way to do it.

[ref-case-nodate]: https://dplyr.tidyverse.org/reference/case_when.html

:::

## Quality check for child

```{r}
#| label: qc-1

ti_2 |>
  group_by(child) |>
	summarize(
		age_min=min(age),
		age_max=max(age))
```

#### Comments on the code

Anytime you create a new categorical variable, you should run a quality check to make sure nothing is wrong. If you are recoding from a continuous variable to a categorical variable, look to make sure that the minimum and maximum values make sense for each category.

## Combining categories

```{r}
#| label: recode-2

ti_2 |>
	mutate(third_class = case_when(
    is.na(pclass) ~ NA,
    pclass=="1st" ~ 0,
    pclass=="2nd" ~ 0,
    pclass=="3rd" ~ 1)) -> ti_3
```

#### Comments on the code

Sometimes you want to combine two or more of the categories together. Here is how you might create a new passenger class variable with values of 1 for third class and 0 for first and second class.

:::

## Quality check for third_class

```{r}
#| label: qc-2

ti_3 |>
	count(third_class, pclass)
```

#### Comments on the code

If you are combining categories, running counts on the old and new variable helps confirm that you did things properly.


## Save everything

```{r}
#| label: save

save.image("../data/demo-04.RData")
```
