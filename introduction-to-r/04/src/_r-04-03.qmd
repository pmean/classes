---
title: "r-04-03, Crosstabulations"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

```{r}
#| label: 04-02-setup
#| message: false
#| warning: false

library(glue)
library(tidyverse)
```

## Hypothetical dataset

```{r}
#| label: hypothetical-2

hypo_2 <- tibble(
  intervention=rep(c("c", "c", "t", "t"), 1:4),
  result=rep(c("f", "s", "f", "s"), 1:4)
)

hypo_2
```

::: notes

Here is a simple hypothetical data set. The variable "intervention" represents whether a patient was a "c" or a "t". Think of this as control and treatment. The variable "result" represents whether the patient was an "f" or an "s". Maybe think of this as failure and success. The first row represents the single patient that is a "cf" or a control failure. The last four rows represent patients that are a "ts" or a treatment success.

:::

## Counts by intervention and result

```{r}
#| echo: true
#| label: 04-03-xtabs-1

hypo_2 |>
  count(intervention, result)
```

::: notes

A crosstabulation shows counts across the combination of two different categorical variables. Only one patient was a control failure, two were control successes, three were treatment failures and four were treatment successes.

:::

## Counts by result and intervention

```{r}
#| echo: true
#| label: 04-03-xtabs-2

hypo_2 |>
  count(result, intervention)
```

::: notes

There is a subtle change when you switch the order of the two arguments in the count function, but the data is essentially equivalent.

:::

## Rectangular layout, rows are result

```{r}
#| echo: true
#| label: 04-03-rectangle-1

hypo_2 |>
  count(intervention, result) |>
  pivot_wider(
    names_from=intervention,
    values_from=n)
```

::: notes

Most other programs arrange the counts automatically in a rectangular grid. In this case where you have two levels for each categorical variable, it would be a square grid, but that's a nitpick.

R is a minimalist package and you have to convert the counts from a single column to a rectangular grid with an extra function, pivot_wider.

:::

## Rectangular layout, rows are outcome

```{r}
#| echo: true
#| label: 04-03-rectangle-2

hypo_2 |>
  count(intervention, result) |>
  pivot_wider(
    names_from=result,
    values_from=n)
```


## Conditional probabilities, 1

```{r}
#| echo: true
#| label: 04-03-conditional-1

hypo_2 |>
  count(intervention, result) |>
	group_by(intervention) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) -> prob_1

prob_1
```

::: notes

There are two different ways to compute conditional probabilities. The first is to divide by the number of controls (3) or the number of treated (7).

:::

## Conditional probabilities, 2

```{r}
#| echo: true
#| label: 04-03-conditional-2

hypo_2 |>
  count(intervention, result) |>
	group_by(result) |>
	mutate(total=sum(n)) |>
	mutate(pct=round(100*n/total)) -> prob_2

prob_2
```

::: notes

You could also divide the number of failures (4) or the number of successes (6). This is more than a trivial distinction.

:::

## Interpretation, 1

```{r}
#| label: 04-03-interpretation-1

interpretation <- c(
	"P[f|c]",
	"P[s|c]",
	"P[f|t]",
	"P[s|t]")

bind_cols(prob_1, tibble(interpretation))
```

::: notes

These probabilities are conditional probabilities. You are looking at the probability of failure or success conditional on the intervention. The overall probability of success is 60%, but when you restrict your attention to just the controls, it jumps to 67%. When you restrict your attention to just the treatment it drops to 57%. The difference is 10%, showing that compared to the controls, the treatment is much less effective.

:::

## Interpretation, 2

```{r}
#| label: 04-03-interpretation-2

interpretation <- c(
	"P[c|f]",
	"P[c|s]",
	"P[t|f]",
	"P[t|s]")

bind_cols(prob_2, tibble(interpretation))
```

## Rectangular arangement of probabilities, 1

```{r}
#| label: 04-03-rectangular-probabilities-1

prob_1 |>
  select(-n, -total) |>
  pivot_wider(
    names_from=result,
    values_from=pct)

```

::: notes

Here is where it gets tricky. The percentages can be arranged with this orientation...

:::


## Rectangular arangement of probabilities, 2

```{r}
#| label: 04-03-rectangular-probabilities-2

prob_1 |>
  select(-n, -total) |>
  pivot_wider(
    names_from=intervention,
    values_from=pct)

```

::: notes

... or this orientation. Which is better?

While both orientations are okay, I have a definite preference for the first one. It all relates to the proximity principle. Place your most interesting comparisons in close proximity.

What is the most interesting comparison? It is the how much larger the success rate in the control group (67%) is compared to the success rate in the treatment group (57%).

:::

## The proximity principle, 1

```{}
# A tibble: 2 × 3
# Groups:   intervention [2]
  intervention     f     s
  <chr>        <dbl> <dbl>
1 c                     67
2 t                     57
```

```{}


# A tibble: 2 × 3
  result           c     t
  <chr>        <dbl> <dbl>
1 f                 
2 s               67    57
```

::: notes

Here are the two tables with only 67% and the 57% showing. Notice how much closer the two numbers are when one is directly beneath the other rather than the two numbers side by side.

:::

## The proximity principle, 2

```{}

                      1256
                       123
```

```{}


                    
                1256   123
```

::: notes

This is a general rule for other numbers as well. Notice how the extra digit in the 1256 stands out when you have 983 directly beneath it compared to when the two numbers are side by side.

There will always be exceptions to the proximity principle, but it is always worth considering.

:::

## Which percentages should you use

+ General guidance
  + Set the rows to your treatment/exposure 
  + Set the columns to your outcome
  + Compute row percentages
+ why not try several formats
  + Revised your tables as often as you revise your writing
  
::: notes

It's beyond the scope of this class, but with crosstabulations, you have choices as to what should be the rows and what should be the columns. Then you can compute row, column, or cell percentages.

I've found that nine times out of ten, the best choice depends on what is your treatment variable and what is your outcome. It usually works best if you place the treatment variable in the rows and the outcome in the columns and compute row percentages. That shows how often you see a particular outcome in the treatment group and the percentage in the control group is right beneath it.

That being said, I would also encourage you to try several different approaches.

:::

