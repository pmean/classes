---
title: "r-03-01, Reading text files"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Text files, 1

-   Advantages
    -    Easy import into many programs
    -    Review using notepad
-   Disadvantages
    -    Bigger size
    -    Slower to import

::: notes

One of the most important skills you will learn in this class is how to read data from text files. Text files are commonly used for data storage because they are easily imported into a variety of different programs. You can often peek at a text file using a simple program like Notepad in order to get a quick feel for what the data looks like.

Text files are popular because just about any program out there can read a text file. You can import a non-text format, one that has special binary characters, but this often limits the types of programs that can read the data. So people who want to make their data widely available will almost store that data in a text file.

Text files do usually take more room than other formats. As cheap as storage is becoming, this may not be that serious a problem. You also need more computing time and power, but again this less of a problem as computers get faster and more powerful.

:::

## Text files, 2

-   Wide range of formats
    -   Delimited
    -   Fixed width
-   First row for variable names
    -   Optional but recommended
-   Always look for a data dictionary

::: notes

Text files come in a variety of format. A delimited file uses a special character, often a comma, to designate where one data value ends and the next one begins. In contrast, a fixed width file requires every variable to occupy a particular column or columns.

Many text files include the names of the variables in the first row of text. This is not required, but it is strongly recommended. I will talk about at least one example where you don't have the names of the variables in the first line of text.

Not every data set that you find is going to have a data dictionary but always look for it, because often that will give you some helpful advice. It will make it easier for you to read the data into a program like R. 

:::

## Should I download before reading?

-   Read directly from website
    -   Convenient
    -   Updates incorporated at each run
-   Download then read
    -   Downloaded file doesn't disappear
    -   Avoid repeated long downloads
    -   Work even when Internet connection is down
  
::: notes

R gives you the option of reading a file on your computer or reading it from a website. For small datasets that you only use once (such as for your homework assignments), it doesn't matter. For larger files and repeated data analyses, there are some advantages to reading directly from the website and some advantages to downloading the file to your computer. 

Reading directly from the website is convenient. You don't have to figure out where to store your downloaded file. If the website updates the file on a regular basis, reading directly always insures that you have the most current data.

If you download the file and then read it, you provide yourself with some insurance against the website disappearing. If the download takes a long time, then you only have to endure that delay once. Finally, a downloaded file allows you to work when an Internet connection is not available, such as during a plane flight (though many airlines will now let you connect while in the air).

:::

## No data dictionary?

-   Peek at file
    -   Same number of delimiters on each line
    -   Tabs versus multiple blanks are hard to distinguish

::: notes

Many files that you find on the Internet are missing any documentation or the documentation fails to help you figure out what approach to use to import the data. If that's the case, don't despair. There are several common sense things you can try.

First, peek at the file and see if there are any obvious delimiters. It's important that you have the exact same number of delimiters on each line of data. If you think the comma is the delimiter, then if there are five commas on one line, then every line should have five commas. The exception would be delimiters found inside quotes.

Tabs versus multiple blanks are hard to distinguish. This sometimes means that you will have difficulty telling whether to use a tab delimited file, a space delimited file, or a fixed width file. I have a web page that talks about this in detail. 

:::

## No data dictionary?

-   Experiment
    -   Read warnings carefully
-   If needed, edit the file manually
    -   Simple edits of one or two offending lines
    -   Global search and replace
    -   Change tabs to blanks
    -   Change multiple blanks to single blank

::: notes

There's nothing wrong with experimenting. Just pick one approach and try it. If you get an error message or the data is garbled, try a different approach. If you get warnings rather than errors, things may be okay, but look carefully at the warning message and double your vigilance efforts before you start analysis.

If all else fails, go in and edit the file manually. This helps if there are just a couple of rows in the file that are causing you heartburn. Usually the error or warning message will give you enough of a hint that you locate the offending lines. If there are problems on every line or almost every line, then sometimes a global search and replace works well.

:::

## Troubleshooting

-   Some warning signs that it didn't work.
    -   Multiple data read in as single variable.
    -   Lots of missing values
    -   Bottom looks different than top
        -   [slice_head, slice_tail][ref-slice]

[ref-slice]: https://dplyr.tidyverse.org/reference/slice.html

::: notes

Sometimes the effort to read in the data will seem like it works, but the data does not get read in properly. If you choose the wrong delimiter, then everything will get squished together into a single file.

You might see a lot of missing values, especially if R was looking for a numeric value for a particular variable, but the data set had string values in that location.

Also, peek at the bottom of the file and compare it to the top. Sometimes an import will get out of step partway through and every single row after that gets misaligned. Make sure that what you see at the bottom of dataset is roughly the same as what you see at the top.

:::