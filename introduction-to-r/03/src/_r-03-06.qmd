---
title: "r-03-06, Real world examples"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Function arguments for advanced options

-   col_select=
-   na=
-   name_repair=
-   skip=

::: notes

There are some nice options that I won't show in this video, but they are still worth noting.

You can use the col_select argument to read in only some of the columns of data. 

Use the na argument to designate codes for missing values. By default, R looks for NA or a width of zero. But sometimes, other symbols, such as an asterisk or a dot may represent missing values.

You can use the name_repair argument to suggest how to handle names that are duplicates or which violate the rules in R for variable names.

You can use the skip argument to ignore a certain number of rows before reading data.

:::

## Example #1, binary.csv

![Figure 1. Excerpt from website](../images/binary-01.png)

::: notes

Let's look at some real world examples. The first one comes from one of the pages at the UCLA site on data analysis examples.

:::

## Example #1, the data

```{r ex1, echo=FALSE}
#| eval: true

library(tidyverse)

fn <- "../data/binary.csv"
tx <- read_lines(fn)
cat(tx[1:6], sep="\n")
```

::: notes

Peeking at the first six lines of data, you can see clearly that it is uses comma delimiter and the first row of data contains the variable names.

:::


## Example #1, the data dictionary

-   No formal data dictionary, but here is a description
    -   "This dataset has a binary response (outcome, dependent) variable called admit. There are three predictor variables: gre, gpa and rank. We will treat the variables gre and gpa as continuous. The variable rank takes on the values 1 through 4. Institutions with a rank of 1 have the highest prestige, while those with a rank of 4 have the lowest."

::: notes

There is no formal data dictionary, which is a shame, but you can find a brief description on a second page where this data set is used.

:::

## Example #1, the code

```{r read-binary}
#| eval: true

fn <- "../data/binary.csv"
raw_data <- read_csv(fn,
  col_types="nnnn")
```

::: notes

Choose the read_csv function and specify four numeric variables.

:::


## Example #1, the output

```{r display-binary}
#| eval: true

raw_data
```

::: notes

The read.csv file does a fine job here.

:::

## Example #2, barbershop-music.txt

![Figure 2. Excerpt from website](../images/barbershop-00.png)

## Example #2, the data file

![](../images/barbershop-01.png)

::: notes

This is a second dataset. Looking at it in notepad, it looks like it is a tab delimited file. But you need to fix the file. The first two lines accidentally got stuck together.

:::

## Example #2, the data file, fixed

![](../images/barbershop-02.png)

::: notes

This is what the fixed file looks like. Normally, I discouraging modifying the data before you input it into R, but here a quick fix makes sense.

:::

## Example #2, the data dictionary

+ No data dictionary
  + Brief description: "At a barbershop music singing competition, choruses are judged on three scales: Music (quality of the arrangement, etc.), Performance, and Singing."

::: notes

There is no formal data dictionary, but the website does offer a brief description.

:::

## Example #2, the code

```{r read-tsa-3}
#| eval: true

fn <- "../data/barbershop-music.txt"
raw_data <- read_tsv(fn,
  col_types="nnn")
```

::: notes

The read_tsv function works well here.

:::

## Example #2, the output

```{r display-example-2}
#| eval: true

raw_data
```

::: notes

The data appears to have been read in nicely.

:::

## Example #3, airport.txt

![Figure 3. Excerpt from website](../images/airport-01.png)

::: notes

The third example comes from the Journal of Statistics Education website.

:::

## Example #3, the data file

![](../images/airport-in-browser.png)

::: notes

This is a third data set. Notice that there are no variable names at the top of the file.

:::

## Example #3, the data dictionary

+ Here is an excerpt from the data dictionary.

```{}
VARIABLE DESCRIPTIONS:
Airport                          Columns 1-21
City                             Columns 22-43 
Scheduled departures             Columns 44-49 
```

::: notes

This dataset has a very nice data dictionary. From the description, you can tell that it is a fixed width format.

:::

## Example #3, the code

```{r airport}
#| eval: true

fn <- "../data/airport.txt"
raw_data <- read_fwf(fn, 
  fwf_cols(21, 22, 6, 7, 9, 10, 10),
  col_types="ccnnnnn")
```

::: notes

You have to do a bit of math here. If the first variable ends in column 21 and the second variable ends in column 43, then the number of columns for the second variable is 43-21.

:::

## Example #3, the output

```{r airport-print}
#| eval: true

raw_data
```

## Links for examples 1-3

Data file links

1. https://stats.idre.ucla.edu/stat/data/binary.csv
2. https://dasl.datadescription.com/download/data/3061
3. http://jse.amstat.org/datasets/airport.dat.txt

Data dictionary links

1. https://stats.idre.ucla.edu/r/dae/logit-regression/
2. https://dasl.datadescription.com/datafile/barbershop-music/
3. http://jse.amstat.org/datasets/airport.txt

## Break #8

+ What have you learned
  + Some real world examples
+ What's next?
  + Some general advice

