---
title: "r-01-02, Comma delimited files"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Preliminary code

```{r setup}
suppressMessages(
  suppressWarnings(
    library(tidyverse)))
options(width=45)
R.version.string
Sys.Date()
```

::: notes

We are loading the tidyverse packages again. The options command sets a width that works well with PowerPoint, but I do not recommend it for your homework which will create an html document that you then convert to pdf format.

The version and date should be part of any R program.

:::

## Read in comma separated values

+ Type the following into notepad.

```{r csv, echo=FALSE, comment=""}
tx <- read_lines("../data/simple.csv")
cat(tx, sep="\n")
```

+ Save it
  + in the data directory
  + filename: simple.csv

::: notes

In notepad or another text editor, type in the following
values.

x,y

1,4

2,8

3,12

4,16

and save the file using the name simple.csv. Note the directory that you are saving it in. Ideally, it should be in a folder named "data".


:::

## the read_csv function 

```{r read-csv}
fn <- "../data/simple.csv"
raw_data <- read_csv(fn,
  col_types="nn")
```

::: notes

I want to show you how to read data using the readr library. The readr library is part of the tidyverse, and effort by Hadley Wickham and others to modernize the R language. 

Comma separated files are so common that R has several dedicated functions for reading them. There is read.csv, which is part of the base R package, and read_csv, which is part of the readr library.

The readr package has several arguments that make your life easier, but the most important, when you are beginning is the col_types argument. if you specify col_types="nn", that tells R to expect numbers (rather than strings or dates) for all of the columns that you input. You'll see in just a bit how to change this if some of your data is strings.

:::

## Display the comma separated data

```{r display-csv}
raw_data
```

::: notes

This program reads in the data and displays it. You see the X values one, two, three, four. The Y values: four eight, twelve, and sixteen.

Okay, not too exciting. It's a small data set. You will likely work with some more interesting data sets, but I wanted to show you how this works from a very basic purpose perspective. 

:::

## Break #1

+ What have you learned
  + Advantages and disadvantages of text files
  + How to read in a comma separated value file
+ What's next?
  + Reading space delimited files
  

## Space delimited files

+ Type the following into notepad.

```{r space-delimited, echo=FALSE, comment=""}
tx <- read_lines("../data/simple.txt")
cat(tx, sep="\n")
```

+ Save it
  + in the data directory
  + filename: simple.txt

::: notes

Comma separated values are one of the most common formats you will encounter, but it is not the only format out there.

Now try something different. Type in the same data, but use a spaces between each number rather than a comma. Notice that there are sometimes a single blank between two numbers and sometimes two blanks. This is commonly done with some text files so that the data is easier to read.

We're going to give the file we create a different name. Instead of simple.CSV, we are going to call it simple.txt.

:::

## Using the read_delim function

```{r txt}
fn <- "../data/simple.txt"
raw_data <- read_delim(fn, 
  delim=" ",
  col_types="nn")
```

::: notes

Here is how you would use read_delim to read this file. The argument delim=" " tells R to look for exactly one blank between two numbers.

:::

## Display space-delimted data

```{r display-space}
raw_data
```

::: notes

The data has been read in correctly.

:::

## Break #2

+ What have you learned
  + Reading space delimited files
+ What's next?
  + Reading tab delimited files  


