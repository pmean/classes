---
title: "r-03-02, Comma delimited files"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
execute: 
  echo: true
  eval: false
---

## The readr library

-   Part of tidyverse
-   For importing text files
-   Broad range of formats
-   Very fast
-   Makes intelligent guesses

::: notes

Although R has had a variety of functions for reading in text data, these were updated in the readr library, part of the tidyverse. These functions in readr import a broad range of text formats. The functions rely on C++ code and are very fast. They also make intelligent guesses that can often get your code up and running faster.

:::

## Useful functions in the readr library

-   read_csv(): comma-separated values
-   read_tsv(): tab-separated values
-   read_delim(): arbitrary delimiter
-   read_fwf(): fixed-width files
-   read_table(): whitespace-separated files

::: notes

There are many functions in the readr library. Here are five of the more commonly used ones. The read_csv function will read text files where individual values are separated (delimited) by commas. The read_tsv function reads text files delimited by the tab character. Use the read-delim function to read files with anything other than a tab or comma as a delimiter. The read_fwf function reads files in a fixed width format. The read_table function reads files where values are separated by one or more whitespace characters (blanks and/or tabs).

You will see applications of these functions in this module.

:::

## Arguments for most readr functions

-   col_names =
    -   TRUE, FALSE, or a vector of names
-   col_types = 
    -   "n" for numeric, "c" for character, "?" for guess
-   na = 
    -   Defaults to "NA"
-   skip =
    -   How many rows to skip (defaults to 0)
    
::: notes

There are some arguments which you will see used in many of these readr functions. The col_names argument indicates whether the first row of the text file contains the names of each variable. It also allows you to specify names for the variables if they are not already provided. The col_types argument specifies which variables are numeric and which are strings. You can ask R to guess which is which by looking at the first few rows. The na argumment allows you to specify how missing values are encoded in the text file. The default is NA, but you can use other codes. The dot (.) is a commonly used code for missing that is the default in SAS and SPSS. You can skip one or more rows of a file with the skip argument.

:::

## An example of a comma delimited file

```{r}
#| label: 03-02-setup-02
#| echo: false
#| eval: true
#| message: false
#| warning: false

library(tidyverse)
load("../data/module03.RData")
```

```{r}
#| echo: false
#| eval: true
#| label: 03-02-read-lines

read_lines("../data/simple.csv") |> 
  cat(sep="\n")
```
::: notes

Here is a simple text file. It is just a file I made up to illustrate how to read text files. The first row provides the names of the two variables, x and y. Normally I do not recommend that you use such generic names as x and y.

:::

## Using the read_csv function 

`r (code["csv"])`

## Live demonstration, 1

Now, you will see a live demonstration of part 1 of [simon-5505-03-demo][ref-demo].

[ref-demo]: https://github.com/pmean/classes/blob/master/introduction-to-r/03/src/simon-5505-03-demo.qmd
