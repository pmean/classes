---
title: "r-01-03, Objects in R"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Introduction

This is a very brief introduction to the basic objects in R.

```{r}
#| label: version-and-current-date

R.version.string
Sys.Date()
```

::: notes

I want to talk about some of the technical underpinnings in R. This is way too technical and way too early to present. I decided to give this lecture here anyway because if you want to become a seasoned R programmer who can write programs from scratch, you need to understand these technical details. For now, if this portion of the lecture seems a bit overwhelming, focus just on the two big things: functions and tibbles. The rest will gradually become more obvious as you see more examples in this class.

:::

## Assignment and naming conventions

-  Use <- and -> to assign objects to a name
   -   Avoid using = for an assignment
-  Rules for names
   -   Combination of letters and numbers
   -   No spaces
   -   No symbols other than underscore (_) and dot (.)
   -   Cannot start with a number
       -   a1 is okay, but 1a is not

::: notes

I use the term "object" as a generic name for a variety of things that you need in R, functions, scalars, vectors, etc. You can assign or store objects using the <- or -> symbols. Now R does allow you to use the equal sign to assign objects and this is the common way to assign in other languages, this is discouraged in R. I'm not sure why, but you will see the equal sign used only inside functions.

When you assign an object, you specify a name. That name has to be combination of letters and numbers. 

You can't put spaces in the middle of a name. R will get confused and think of it as two names rather than one.

You can't use most symbols. A dash inside a variable name for example will cause confusion because R will think that you want to perform a subtraction.

The two symbols that you can use are the underscore and the dot. In fact, you will see these two symbols a lot both in your code and in the various functions that you will use in R. Both the underscore and the dot represent ways to mimic 

:::

## Recommendations for names, 1

-  Avoid generic names (x,y or v1, v2, v3)
-  Don't run two words together (writersexchange)
-  Use short words separated by underscores (writers_exchange)
   -   All lower case
   -   No abbreviations
   -   Avoid names identical with common functions

::: notes

Although you have great latitude in names, I have a few recommendations that will help make your code easier to read and maintain.

First, avoid short generic names. When you assign names of x and y early in the program, you will get confused halfway through and think of x as y or y as x.

Instead use one or two words to describe what you are storing under that name. You can't put spaces between two words, but don't just run the two words together.

There's a story about a group, The Writer's Exchange, that wanted to start a website. So they called it www.writersexchange.com. Then someone notices that you could read it not as writers exchange, but as writer sex change. Not exactly what they wanted.

You should use the underscore to separate two words. So it would be writers underscore exchange.

Use all lower case. Upper case is harder to read. It seems contradictory because DON'T ALL WARNINGS COME IN UPPER CASE? It turns out that upper case is harder to read because all the letters are the same height. With lower case, you have some letters that rise above (such as f and t) and some that stretch out below (such as j and y). These ascenders and descenders provide an extra visual cue.

Now many programmers will avoid all uppercase, but will use an initial capital letter. That's okay, but I find using all lower case makes things easier to remember. Now for headings in tables and titles on graphs, I will still use initial capitals, but only then.

I've also learned to avoid abbreviations. I can never remember whether the abbreviation for height is hgt or ht or even just the single letter h. There's nothing worse than having half of your calculations using hgt and the other half using ht.  It's a bit more typing, I'll admit, but I've taken to spelling it out as h-e-i-g-h-t. RStudio and many other integrated programming environments have an autocomplete function that can save you time.

Now avoid using common function names like list and matrix. R will allow this, but your code will be easily misinterpreted by others.

:::
   
## Recommendation for names, 2   
   
-  Common alternatives to the underscore separator
   -   short words separated by dots
   -   Start each word with capital (WritersExchange)
-  Separate naming recommendation
   -   Use dash instead of underscore for file names, chunk names
-  What should YOU use
   -   Now: Anything is fine, just be consistent
   -   Later: See if there is an official or unofficial company standard

::: notes

You will see many programmers who use the dot instead of the underscore to separate two or more words in a variable name. To use the earlier example, it would be writers dot exchange. This is fine, but will probably confuse programmers who have first learned how to program in Python, where the dot has a special meaning.

Another common approach is to start each word with a capital letter. Capital W writers capital E exchange.

Now I really like the look of a dash. I know I can't use it for variable names, but I still use it for file names and chunk names. I know this is inconsistent, but it's evolved into a habit that I can't break.

You need to make a choice. For now, any standard is fine. Just be consistent. Later, when you graduate and find yourself in your first job, see if there is a written standard. If not a written standard, then maybe an unofficial standard, which you can infer by looking at what other programmers do.

:::

## Functions

```{r}
#| label: functions

sqrt(3)
sqrt(1:5)
barplot(height=5:1, names=1:5)
```

::: notes

Functions receive input from one or more objects and produce an object in return. The input values found inside the parentheses of a function are called its arguments.


Functions can be as simple as computing a square root. Many functions are vectorized, meaning that they will compute a function for every element in a vector. Sometimes a function may produce more than just a single object as output. Here's an example of a function that produces a graph.

:::

## Nested functions and pipes

```{r}
#| label: nested-functions

x <- 0.9
y <- asin(sqrt(x))
y
x |>
  sqrt() |>
  asin() -> y
y
```

::: notes

You can nest one function inside another. So asin(sqrt(x)) feeds the variable x into the square root function and then takes the output of the square root function and feeds it into the arcsin function. This result is stored in y.

You can accomplish the same thing using the pipe symbol. Take the variable x and pipe it into the square root function. Then take the output from the square root function and pipe it into the arcsin function. Store the result in y.

While the pipe symbol seems a bit odd in this simple example, you will see examples fairly soon, where you might nest a half dozen functions. The vertical format that pipes produce make the code easier to read. Pipes also make it easier to fix errors.
:::

## Named arguments in functions

```{r}
#| label: named-functions

qnorm(p=0.99, mean=100, sd=15)
qnorm(0.99, 100, 15)
qnorm(0.99)
```

::: notes

Many functions include names for the inputs. The first example shows how to compute the 0.99 quantile of a normal distribution with a mean of 100 and a standard deviation of 15. 

Does anyone know what famous measurement has a mean of 100 and a standard deviation of 15? Answer: IQ scores. The 0.99 quantile represents the IQ of a person who is smarter than 99% of the population.

The use of these names is optional in most cases, but it requires you to memorize the proper order.

Many functions will have default values. If you do not specify the mean and sd arguments in the qnorm function, it will use mean=0 and sd=1.

:::

## Scalars

```{r}
#| label: scalars

scalar_example_1 <- 3
scalar_example_1
scalar_example_2 <- "R"
scalar_example_2
scalar_example_3 <- "3"
scalar_example_3
```

::: notes

Single values in R are called scalars. The most common scalars are numbers and strings. Strings are always surrounded by quote marks.

There are other scalars that are important, such as dates

:::

## Vectors

```{r}
#| label: vectors

vector_example_1 <- c(1, 2, 3)
vector_example_1

vector_example_2 <- c("a", "b", "c")
vector_example_2

vector_example_3 <- c("a", 2)
vector_example_3
```

::: notes

A combination of number or string scalars is called a vector. Use the c function to create vectors.

If you try to mix different scalar types, R will convert them to a common format.

:::

## Naming vectors

```{r}
#| label: naming

my_degrees <- c(
  BA=1977, 
  MS=1978, 
  PhD=1982)
my_degrees

my_name <- c(
  first_name="Stephen", 
  middle_initial="D", 
  last_name="Simon")
my_name
```

::: notes

You can name the individual elements of a vector. This is not done that often, but the same naming concept will be very important for more complex objects.

:::

## Matrices using cbind and rbind functions

```{r}
#| label:  matrices-1

matrix_example_1 <- 
  cbind(
    c(1, 2, 3), 
    c(4, 5, 6))
matrix_example_1

matrix_example_2 <- 
  rbind(
    c(1, 2, 3), 
    c(4, 5, 6))
matrix_example_2
```

::: notes

A matrix is a combination of vectors, with the important restriction that all the vectors have to be the same type. You can't mix strings and numbers for example.

You can create a matrix using the cbind or rbind functions.

:::

## Matrices using the matrix function

```{r}
#| label:  matrices-2

matrix_example_3 <- 
  matrix(
    c(1, 2, 3, 4, 5, 6), 
    nrow=2, 
    ncol=3, 
    byrow=TRUE)
matrix_example_3
```

::: notes

The matrix function will reshape a vector into a matrix. There are lots of options in the matrix function that control the shape of the matrix and the order in which it is filled.

:::

## Lists

```{r}
#| label:  lists

list_example_1 <- 
  list(
    scalar_example_1, 
    vector_example_2, 
    matrix_example_3)
list_example_1
```

::: notes

A list is a combination of objects of different types. It can include scalars, vectors, matrices, or other types of R objects that we have not seen yet. You can also include one list inside another list.

:::

## Lists using names

```{r}
#| label: lists-using-names

list_example_2 <- 
  list(
    name=my_name, 
    degrees=my_degrees, 
    age=64)
list_example_2
```

::: notes

A list can contain virtually anything, so using names is almost always recommended.

:::

## Data frames

```{r}
#| label:  data-frames

data_frame_example_1 <- 
  data.frame(
    vector_example_1, 
    vector_example_2)
data_frame_example_1
```

::: notes

A data frame is a combination of vectors. The vectors have to have the same length, but they can be different types.

:::

## Naming data frame columns

```{r}
#| label:  data-frames-naming

data_frame_example_2 <- 
  data.frame(
    c(1, 2, 3), 
    c("a", "b", "c"))
data_frame_example_2

data_frame_example_3 <- 
  data.frame(
    small_numbers=c(1, 2, 3), 
    early_letters =c("a", "b", "c"))
data_frame_example_3
```

::: notes

R will always name the columns in a data frame using common sense rules. Sometimes this leads to poor choices (common sense isn't always common sense). So it is strongly recommended that you specify names explicitly.

:::

## Tibbles

```{r}
#| label: tibbles
#| message: false
#| warning: false

library(tidyverse)

tibble_example_1 <- 
  tibble(
    x=c(1, 2, 3),
    y=c("a", "b", "c"))
tibble_example_1
```

::: notes

A tibble is a slightly modified data frame designed by the tidyverse team. It behaves almost exactly like a data frame. There are other subtle differences in behavior, however, that reduce the risk of unexpected errors. There are a few times when these modifications do not work well with some of the older functions in R. But tibbles work very effectively with the functions of the tidyverse.

:::

## Vector or tibble?

```{r}
#| label: vector-tibble
#| echo: true

sample_vector <- 1:5
sample_vector
sample_tibble <- tibble(sample_vector)
sample_tibble
```

::: notes

One of the potential sources for confusion in R is when a single column of data is a vector and when it is a tibble. Note that a vector prints out horizontally and a tibble prints out vertically. Some functions need to see a single column of data as a vector, some need to see a single column of data as a tibble, and some can accept either. It is an unavoidable source of problems.

:::