---
title: "r-01-03, Objects in R"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
execute: 
  echo: true
---

## Introduction

This is a very brief introduction to the basic objects in R.

```{r}
#| label:  version-and-current-date

R.version.string
Sys.Date()
```

## Functions

```{r}
sqrt(3)
sqrt(1:5)
barplot(height=5:1, names=1:5)
```

::: notes
Functions receive input from one or more objects and produce an object in return. It could be as simple as computing a square root. Many functions are vectorized, meaning that they will compute a function for every element in a vector.
:::

## Nested functions and pipes

```{r}
x <- 0.9
y <- asin(sqrt(x))
y
x |>
  sqrt() |>
  asin() -> y
y
```

::: notes
You can nest one function inside another. So asin(sqrt(x)) feeds the variable x into the square root function and then takes the output of the square root function and feeds it into the arcsin function. This result is stored in y.

You can accomplish the same thing using the pipe symbol. Take the variable x and pipe it into the square root function. Then take the output from the square root function and pipe it into the arcsin function. Store the result in y.

While the pipe symbol seems a bit odd in this simple example, you will see examples fairly soon, where you might nest a half dozen functions. The vertical format that pipes produce make the code easier to read. Pipes also make it easier to fix errors.
:::

## Named arguments in functions

```{r}
#| label: named-functions
qnorm(p=0.99, mean=100, sd=15)
qnorm(0.99, 100, 15)
qnorm(0.99)
```

::: notes

Many functions include names for the inputs. The first example shows how to compute the 0.99 quantile of a normal distribution with a mean of 100 and a standard deviation of 15. 

Does anyone know what famous measurement has a mean of 100 and a standard deviation of 15? Answer: IQ scores. The 0.99 quantile represents the IQ of a person who is smarter than 99% of the population.

The use of these names is optional in most cases, but it requires you to memorize the proper order.

Many functions will have default values. If you do not specify the mean and sd arguments in the qnorm function, it will use mean=0 and sd=1.

:::

## Scalars

```{r}
#| label: scalars

scalar_example_1 <- 3
scalar_example_1
scalar_example_2 <- "R"
scalar_example_2
scalar_example_3 <- "3"
scalar_example_3
```

::: notes

Single values in R are called scalars. The most common scalars are numbers and strings. Strings are always surrounded by quote marks.

There are other scalars that are important, such as dates

:::

## Vectors

```{r}
#| label: vectors

vector_example_1 <- c(1, 2, 3)
vector_example_1

vector_example_2 <- c("a", "b", "c")
vector_example_2

vector_example_3 <- c("a", 2)
vector_example_3
```

::: notes

A combination of number or string scalars is called a vector. Use the c function to create vectors.

If you try to mix different scalar types, R will convert them to a common format.

:::

## Naming vectors

```{r}
#| label: naming

my_degrees <- c(
  BA=1977, 
  MS=1978, 
  PhD=1982)
my_degrees

my_name <- c(
  first_name="Stephen", 
  middle_initial="D", 
  last_name="Simon")
my_name
```

::: notes

You can name the individual elements of a vector. This is not done that often, but the same naming concept will be very important for more complex objects.

:::

## Matrices using cbind and rbind functions

```{r}
#| label:  matrices-1

matrix_example_1 <- 
  cbind(
    c(1, 2, 3), 
    c(4, 5, 6))
matrix_example_1

matrix_example_2 <- 
  rbind(
    c(1, 2, 3), 
    c(4, 5, 6))
matrix_example_2
```

::: notes

A matrix is a combination of vectors, with the important restriction that all the vectors have to be the same type. You can't mix strings and numbers for example.

You can create a matrix using the cbind or rbind functions.

:::

## Matrices using the matrix function

```{r}
#| label:  matrices-2

matrix_example_3 <- 
  matrix(
    c(1, 2, 3, 4, 5, 6), 
    nrow=2, 
    ncol=3, 
    byrow=TRUE)
matrix_example_3
```

::: notes

The matrix function will reshape a vector into a matrix. There are lots of options in the matrix function that control the shape of the matrix and the order in which it is filled.

:::

## Lists

```{r}
#| label:  lists

list_example_1 <- 
  list(
    scalar_example_1, 
    vector_example_2, 
    matrix_example_3)
list_example_1
```

::: notes

A list is a combination of objects of different types. It can include scalars, vectors, matrices, or other types of R objects that we have not seen yet. You can also include one list inside another list.

:::

## Lists using names

```{r}
#| label: lists-using-names

list_example_2 <- 
  list(
    name=my_name, 
    degrees=my_degrees, 
    age=64)
list_example_2
```

::: notes

A list can contain virtually anything, so using names is almost always recommended.

:::

## Data frames

```{r}
#| label:  data-frames

data_frame_example_1 <- 
  data.frame(
    vector_example_1, 
    vector_example_2)
data_frame_example_1
```

::: notes

A data frame is a combination of vectors. The vectors have to have the same length, but they can be different types.

:::

## Naming data frame columns

```{r}
#| label:  data-frames-naming

data_frame_example_2 <- 
  data.frame(
    c(1, 2, 3), 
    c("a", "b", "c"))
data_frame_example_2

data_frame_example_3 <- 
  data.frame(
    small_numbers=c(1, 2, 3), 
    early_letters =c("a", "b", "c"))
data_frame_example_3
```

::: notes

R will always name the columns in a data frame using common sense rules. Sometimes this leads to poor choices (common sense isn't always common sense). So it is strongly recommended that you specify names explicitly.

:::

## Tibbles

```{r}
#| label: tibbles
#| message: false
#| warning: false

library(tidyverse)

tibble_example_1 <- 
  tibble(
    x=c(1, 2, 3),
    y=c("a", "b", "c"))
tibble_example_1
```

::: notes

A tibble is a slightly modified data frame designed by the tidyverse team. It behaves almost exactly like a data frame. There are other subtle differences in behavior, however, that reduce the risk of unexpected errors. There are a few times when these modifications do not work well with some of the older functions in R. But tibbles work very effectively with the functions of the tidyverse.

:::