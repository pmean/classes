---
title: "r-01-04, Anatomy of a small R program"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Anatomy of a small R program, overview

![](../images/structure-of-r-program-01.png "Program with components labelled")

::: notes

This is a full listing of a small program written in Rmarkdown. The font is too small to read. Don't worry, I just wanted you to see the full picture. I'll look at small pieces of this program using a readable font size.

:::

## YAML header

```{r}
#| label: overview
#| echo: false
#| comment: ""
#| message: false
#| warning: false

library(stringr)

tx <- readLines("simon-5505-01-small-program.qmd")
header_lines <- str_which(tx, "---")
backtick_lines <- str_which(tx, "``")
eof_line <- length(tx)
beg_line <- header_lines[1]
end_line <- header_lines[2]

cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

All right, The first thing we have is the header. The header uses a structure called YAML (Y-A-M-L). YAML is a special type of up format that is used by lots of programmers. The header provides a bit of information about the about the program. The default option when you start up a new R Markdown file is to list, the title, author, date, and output format.

I find the word "date" by itself ambiguous, so I add the word "Created" to distinguish the creation date from the last modified date. It is not easy to track the last modified date in RStudio.

Quarto has options for creating web pages (html documents). You can also produce Word documents and PDF documents. I should warn you that creating PDF documents directly is a bit tricky. You need to have a program called LaTeX (pronounced lay-tech) installed first.

You can also produce Powerpoint files, which this is an example of.

The default is HTML and that's a pretty good format. Quite honestly, I've got a lot of mileage out of HTML. It has some limitations compared to other formats, but it is so much simpler to create and maintain the code that produces HTML files.

:::

## First comment

```{r}
#| label: free-text-1
#| echo: false
#| comment: ""
#| 
beg_line <- end_line+1
end_line <- backtick_lines[1]-1
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

Here's a brief sentence written as open text. You will be required to provide open text comments on all your homework assignments. Often just a single sentence will do, but do get in the practice of interspersing open text comments throughout your code.

:::

## First code chunk

```{r}
#| label: chunk-1
#| echo: false
#| comment: ""

beg_line <- end_line+1
end_line <- backtick_lines[2]
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

In quarto, sections of R code are delineated with three backticks. The backtick is a leftward slanting single quote mark. For most keyboards, you will find the backtick key on the top row, just to the left of the "1" key.

The beginning of a chunk of R code has three backticks, followed by a left curly bracket, the letter "r" and then an optional name. End with a right curly bracket.

This program chunk includes two lines of code.

R.version.string displays the version of R that you are running. You should try to use a version of R at 4.0 or higher. This would only be an issue if you've been using R for more than a couple of years and have been lazy about upgrades. If you downloaded R at the beginning of this semester, you will have a version of R beyond 4.0.

The second line of code, Sys.Date(), displays the current date. Sometimes knowing when a program was run can help you decide if you need to run the program again (perhaps because the data has changed, or you are using a new version of R).

After this you see three more backticks, which tells R Markdown that the chunk of code has ended.

I recommend that you try to avoid long stretches of R code. Break it up into segments of no more than 20 lines of code, and often less than this is better. Working with your program in chunks and interspersing free text comments liberally makes it easier to maintain your code.

:::

## Second comment

```{r}
#| label: free-text-2
#| echo: false
#| comment: ""
 
beg_line <- end_line+1
end_line <- backtick_lines[3]-1
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

Here's another brief comment. Note that you write an R Markdown a bit differently than most other programs. Most other programs place the comments inside of special delimiters. In SAS, for example, you start a comment with a slash and an asterisk and end it with an asterisk and a slash.

In R Markdown, the comments are not delimited. The code is delimited by three consecutive backticks.

:::

## Second code chunk

```{r}
#| label: chunk-2
#| echo: false
#| comment: ""
 
beg_line <- end_line+1
end_line <- backtick_lines[4]
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

Here's some more R code. I named the chunk "read-rdata-file". The load function reads information from a file named ../data.two-small-dataframes.RData.

I have to apologize here because Powerpoint splits the load function onto two consecutive lines, making it a bit harder to read.

The second line of code is the ls function. Just ls with a left and a right parenthesis. This function lists everything that you have either loaded or created within R. In this case, it is just the information that we got from the two-small-dataframes.RData file.

There are two objects, bump and fat. These are actually dataframes, the standard way that R stores data. If you look on my github site, you will find data dictionaries for these two dataframes.

The head function lists the first few lines of ant object in R. In this case, it will show the first six lines of the dataframe bump.

:::

## Third comment

```{r}
#| label: free-text-3
#| echo: false
#| comment: ""
 
beg_line <- end_line+1
end_line <- backtick_lines[5]-1
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

After the second chunk of R code, I add a couple of extra comments.

It's very simple program but if you can get this program to run, you probably have smooth sailing for the rest of the class. I really believe that installing the software is often tricky. Getting the first program to run is often tricky. But once you get those going then you keep on modifying. Just make tiny changes to the programs you already have. It will either work or there will be an obvious error that you can fix.

The problem is getting the first program will run. Once you get one program that works, the rest is downhill.

I need to emphasize here very strongly if you're having problems. Come and see me right away. Drop me an email. Try to visit. I do not have official office hours, but I will make appointments at any reasonable time for people to come and talk. 

:::

## Third code chunk

```{r}
#| label: chunk-3
#| echo: false
#| comment: ""
 
beg_line <- end_line+1
end_line <- backtick_lines[6]
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

This chunk of code produces a simple line graph.

:::

## Fourth comment

```{r}
#| label: free-text-4
#| echo: false
#| comment: ""
 
beg_line <- end_line+1
end_line <- eof_line
cat(paste0(tx[beg_line:end_line], collapse="\n"))
```

::: notes

The last comment provides a brief interpretation of the graph. You must provide interpretations for every graph and for almost all tables.

:::

## Anatomy of a small program, review

![](../images/structure-of-r-program-01.png "Program with components labelled")

::: notes

Here is the full program again. You can see that it starts with a header, and alternates between free text and R code.

I like this structure a lot because it allows you to liberally comment your code. Comments are easy. I'm not the best at using good programming practices, but the one thing I am rabid about is I try to put in a lot of documentation. It takes time, but usually pays off.

:::

## Output, overview

![](../images/structure-of-r-program-04.png "Output with components labelled")

::: notes

Here is an overview of the output. The font is too small to read, but I wanted you to see the big picture. The result of all this work is a document that includes information from the YAML header, with comments, code, and output interpresed.

:::

## Output, part 1

![](../images/structure-of-r-program-05.png "First part of output, header and information about this file")

::: notes

The output starts with the title that you specified in the YAML header. Next follows the first comment that you placed at top of the first program chunk. Then the pieces of the program chunk appear with output from each part of the chunk interspersed. 

:::

## Output, part 2

![](../images/structure-of-r-program-06.png "Second part of output, reading in the data")

::: notes

Next is another comment, followed by code, output, and a third comment.

:::

## Output, part 3

![](../images/structure-of-r-program-07.png "Third part of output, line graph")

::: notes

Finally, some more code, a graph, and a final comment.

:::

## Suggestions for nice looking comments

-   Quarto (and Rmarkdown) use tagged text files
    -   Based on [Markdown][ref41]
    -   Easy to remember
    -   Easy read in its raw form
    -   Use any program that edits text files
-   Interface with [Pandoc][ref42] to convert to (and from)
    -   Microsoft Word, Powerpoint
    -   Html files
    -   PDF files

::: notes

Comments in Quarto and its predecessor, Rmarkdown, use a simple format, a tagged text file. These are based on two industry standards, Pandoc and Markdown. 

There are lots of tagged text formats. One of the most common is html, the format used to display web pages. Markdown and Pandoc were developed as a simpler alternative to html. It has fewer features, but is simpler and thus easier to remember. 

One of the nicest features of Markdown is that it is easy to read in its raw form. If you have ever looked at the raw html code of a web page, it is quite daunting. The tags are big and get in the way of reading the actual content. Markdown, in contrast, adds only a little bit of bulk to your content.

Another big advantage of Markdown is that the files can be edited by a wide range of programs. You are not tied to a specific software system.

Pandoc lives up to the "pan" in its name, which is code for "everything". Using Markdown syntax, Pandoc can convert markdown files into dozens of different formats. In particular, it can create Word documents, Powerpoint presentations, web pages (html format), and PDF files. I should not that PDF files are a bit tricky because you need some version of Latex (or a new alternative typst) on your system. Instead of going straight to PDF, I recommend that you produce html files and then print that file to a pdf printer.

There are lots of little enhancements to your comments. Some that I use quite often are the double pound (##) symbols at the start of the line to make a headline in a larger font.

::::
    
## Suggestions for nice looking comments

-   Start line with ## for headlines
-   Start lines with -, +, or * for bulleted lists
    -   Indent for sub bullets
-   Surround text with ** for **bold**
-   Surround text with $ for Greek letters ($\mu$) and math symbols ($\sqrt{2}$) 
-   Use [] for hyperlinks

Many more in [quarto guide][ref43]

[ref43]: https://quarto.org/docs/authoring/markdown-basics.html

::: notes

There are lots of little enhancements to your comments. Some that I use quite often are the double pound (##) symbols at the start of the line to make a headline in a larger font. You can make even larger headlines with a single pound, smaller headlines with three or more pounds.

I use bulleted lists a lot and you just have to start each line with a dash, plus, or asterisk to get the lines in a bulleted list. If you need sub bullets, just indent.

Surround one or more words with a double asterisk to get bold text and surround text with single or double dollar signs to get Greek letters like mu or math symbols like the square root sign.

::::
    
[ref41]: https://www.markdownguide.org/
[ref42]: https://pandoc.org/

## An example of raw Markdown codes

```
## Suggestions for nice looking comments

-   Start line with ## for headlines
-   Start lines with -, +, or * for bulleted lists
    -   Indent for sub bullets
-   Surround text with ** for **bold**
-   Surround text with $ for Greek letters ($\mu$) and math symbols ($\sqrt{2}$) 
-   Use [] for hyperlinks

Many more in [quarto guide][ref43]

[ref43]: https://quarto.org/docs/authoring/markdown-basics.html
```

::: notes

Here is an example of what some of these Markdown tags look like. The double pound provides the slide title, the dashes provide bullets. Note the indented bullet. 

You don't have to use a lot of these features to make your comments look nice. Just a few headlines here and an occasional bolded phrase will work wonders for you.

You will see how I use these features in various template programs in each module.

:::