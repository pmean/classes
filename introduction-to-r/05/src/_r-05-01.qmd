---
title: "r-05-01, The FEV data set"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

```{r}
#| label: 05-01-setup
#| message: false
#| warning: false

library(glue)
library(gt)
library(tidyverse)
library(yaml)

load("../data/demo-05.RData")
load("../data/module-05.RData")
``` 

## A quick note on a side topic, 1

-   Creating "nice" tables is difficult
    -   Round aggressively
    -   Include title at top
    -   Add explanatory material at bottom
    -   Use descriptive row and column names
    -   Use shading and/or borders
    
::: notes

I have been struggling for the past two years to settle on an approach for creating nice tables in R. The word "nice" means several things.

First, your tables should round aggressively. Two significant figures in most cases. Sometimes three significant figures if a number is close to a power of 10.

Second, every table should have a title. It might also be nice to include an explanatory note at the bottom of the table, such as the name of the person who created the table and when it was created.

You might want to use descriptive row and column names rather than the cryptic names you use in R.

You might want to add shading and/or borders to make your table easier to read.

:::

## A quick note on a side topic, 2

-   Your options
    -   Cut and paste into Word/Excel
        -   Fast
        -   WYSIWG
        -   Revisions are painful
    -   Create nice table in R
        -   Slow
        -   Every change requires a re-rendering
        -   Revisions are easy
        
## A quick note on a side topic, 3

-   Many R packages for nice tables
    -   David Keyes. How to make beautiful tables in R. R for the rest of us blog, 2019-11-12. Available in [html format][ref-keyes-2019].
-   I will use gt library in this demo
    -   Short for "Grammar of tables"
    -   Uses a layered approach like ggplot2
-   Use in this class is recommended, but not required.
    
[ref-keyes-2019]: https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r

## One warning about gt and similar packages

-   Nice and re-usable are in conflict
    -   Numbers converted to strings
    -   Column names might be non-standard
        -   Embedded blanks, special symbols
    -   Merged cells destroy rectangular format
    
::: notes

When you create nice looking tables, you have to adapt the simple structure of a tibble or data frame. Some of your numbers might be converted to strings to allow you to insert comma separators at the thousand and million marks. Your column names might end up with embedded blanks or special symbols that are not standard names that R likes to see. Your table might merge cells, column headers, or row labels. This destroys the rectangular format of your data.

:::

## The gt function creates a tbl_df object

```{r}
#| echo: true
#| label: 05-01-gt

tibble(x=1:4) |>
	gt() -> test01

names(test01)
```

::: notes

The gt function, in particular, takes a very simple tibble and adds a whole host of extra information. The result is an object called a tbl_df. It is a list with 17 values starting with the data itself and information (at this point just default values) for how to present the heading, footnotes, etc. You need all this complexity to display the data nicely, but it means that the output from the gt function can only be easily manipulated by other functions in the gt library.

:::

## How do you characterize relationships?

+ Between two continuous variables
  + Correlations and scatterplots
+ Between two categorical variables
  + Crosstabulations
+ Between a continuous variable and a categorical variable
  + Boxplots
  
::: notes

In an earlier module, you saw datasets that had mostly continuous variables. If you wanted to examine the relationship between two continuous variables, you would look at correlations and scatterplots.

Then in a different module, you saw datasets that had mostly categorical variables. If you wanted to examine the relationship between two categorical variables, you would look at crosstabulations.

In this module, you will see datasets that have a mix of continuous and categorical variables. If you want to examine the relationship between a continuous variable and a categorical variable, you would use a boxplot.

:::

## FEV data

```{r}
#| label: 05-01-yaml

f1 <- "https://raw.githubusercontent.com"
f2 <- "pmean/data/refs/heads/main/files"
f3 <- "fev.yaml"

dd <- read_yaml(glue("{f1}/{f2}/{f3}"))
```

`r dd$description`

::: notes

The fev data set looks at pulmonary function in a group of children. The acronym FEV stands for Forced Expiratory Volume and represents how air you can blow out of your lungs.

This dataset has 654 rows and 5 variables: age (in years), fev (in liters), height (in inches), sex, and smoking status. Both sex and smoking status are categorical and use number codes. 

:::


## read in the FEV data set, glimpse

```{r}
#| label: 05-01-glimpse

glimpse(pulmonary)
```

::: notes

Here is a glimpse of the data.

:::

## Verify that there are no missing values

`r code[["missing"]]`

## Create factors

`r code[["factors"]]`

## Summary for continuous variables: age

`r code[["age"]]`

## Summary for continuous variables: fev

`r code[["fev"]]`

## Summary for continuous variables: ht

`r code[["ht"]]`

## Summary for categorical variables: sex

`r code[["sex"]]`

## Summary for categorical variables: smoke

`r code[["smoke"]]`
