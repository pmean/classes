---
title: "r-02-01, Using select, slice, filter"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

## Some definitions, 1

+ Categorical = small number of possible values
+ Examples
  + Sex (Male or Female),
  + Race/ethnicity (Caucasian, African American, Hispanic, etc.),
  + Cancer stage (I, II, III, or IV),
  + Birth delivery type (Vaginal, C-section). 

::: notes

A **categorical variable** is a variable that can only take on a small number of values. Each value is usually associated with a particular category.

:::

## Some definitions, 2

+ Continuous variable = large number of possible values
+ Examples of continuous variables are
  + Birth weight in grams,
  + Gestational age,
  + Fasting LDL level.

::: notes

A **continuous variable** is a variable that can take on a large number of possible values, potentially any value in some interval.

There are some variables that are on the boundary between categorical and continuous, but it is not worth quibbling about here. 

The point to remember is that the types of graphs that you use and the types of statistics that you compute are dependent on many things, but first and foremost on whether the variables are categorical, continuous, or a mixture.

Today, you will see examples involving mostly continuous variables.

:::

## Variable names

+ Short but descriptive
+ Mix of letters and numbers
  + Must start with a letter
  + Avoid most symbols
+ No blanks
  + CamelCase
  + dot.delimited.names
  + underscore_delimited_names

::: notes

This data set did not have a header, a line at the very top of the file that lists variable names. R uses the default names V1, V2, etc. As a general rule, you should use brief (but descriptive) names for every variable in your data set. The names should be around 8 characters long. Longer variable names make your typing tedious and much shorter variable names makes your code terse and cryptic.

You should avoid special symbols in your variable names especially symbols that are likely to cause confusion (the dash symbol, for example, which is also the symbol for subtraction). You should also avoid blanks. These rules are pretty much universal across most statistical software packages. If you violate these rules, you will find out that, at a minimum, you will always have to surround your variable name by quotes to avoid problems.

There are times when you'd like to have a blank in your variable name and you can use two special symbols that you can use in R (and most other statistical pacakges), the underscore symbol (above the minus key on most keyboards) and the dot (period). These symbols create some artificial spacing that mimics the blanks. Another approach is "CamelCase" which is the mixture of upper and lower case within a variable name with each uppercase designating the beginning of a new "word".

:::

{{< include ../data/burger-calories.yaml >}}

## Read burger-calories

```{r}
#| label: read-yaml
#| message: false
#| warning: false

library(tidyverse)
library(yaml)
b <- read_yaml("https://raw.githubusercontent.com/pmean/data/refs/heads/main/files/burger-calories.yaml")
```


```{r}
#| label: read-tsv
#| echo: true

burgers <- read_tsv(
  file="../data/burger-calories.txt", 
  col_types="nnn")
burgers
```


:::notes

:::

## Select, 1

```{r}
#| label: select
#| echo: true

burgers |>
  select(Calories)
```

::: notes

The [select][ref11] function will include or exclude variables from a tibble/dataframe.

[ref11]: https://dplyr.tidyverse.org/reference/select.html

:::

## Select, 2

```{r}
#| label: select-2
#| echo: true

burgers |>
  select(-Fat)
```


## Alternatives to select, 1

```{r}
#| label: select-alternative-1
#| echo: true

burgers$Calories
```

::: notes

There are some "old school" ways to select a single column of data. These will produce a vector rather than a tibble/dataframe.

:::

## Alternatives to select, 2

```{r}
#| label: select-alternative-2
#| echo: true

burgers[ , 1]
```

## Alternatives to select, 3

```{r}
#| label: select-alternative-3
#| echo: true

burgers[ , 3]
```

## Slice, 1

```{r}
#| label: slice-1
#| echo: true

burgers |>
  slice(1)
```

::: notes

The [slice][ref12] function selects rows based on their position.

[ref12]: https://dplyr.tidyverse.org/reference/slice.html

:::

## Slice, 2

```{r}
#| label: slice-2
#| echo: true

burgers |>
  slice_max(Calories)
```

::: notes

The slice_max function, described in the previous link, selects rows based on the size of one of the variables.

:::

## Filter, 1

```{r}
#| label: filter-1
#| echo: true

burgers |>
  filter(Sodium == 1500)
```

::: notes

The [filter][ref13] function selects rows of a tibble or dataframe based on a logical condition (an R expression that produces true/false values).

[ref13]: https://dplyr.tidyverse.org/reference/filter.html

:::

## Filter, 2

```{r}
#| label: filter-2
#| echo: true

burgers |>
  filter(Calories >= 600)
```

## Alternatives to slice/filter, 1

```{r}
#| label: slice-filter-alternatives-1
#| echo: true

burgers[1, ]
```

## Alternatives to slice/filter, 2

```{r}
#| label: slice-filter-alternatives-2
#| echo: true

burgers[burgers$Sodium == 1500, ]
```