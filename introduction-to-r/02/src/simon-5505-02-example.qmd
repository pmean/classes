---
title: "Example programs for module 02"
format: 
  html:
    embed-resources: true
execute: 
  error: true
---

## File details

This program was written by Steve Simon on 2020-02-08 with a major revision on 2024-12-29. It is placed in the public domain and you can use this any way you wish.


```{r}
#| label: setup
#| message: false
#| warning: false

R.version.string
Sys.Date()
library(tidyverse)
```

## Read burger-calories

```{r}
#| label: read-tsv
#| echo: true
#| message: false
#| warning: false

library(tidyverse)

burgers <- read_tsv(
  file="../data/burger-calories.txt", 
  col_types="nnn")
burgers
```

::: notes

We will talk more about the read_tsv function later. For now, just note that it reads data from a text file and stores it in a tibble named burgers.

:::

## Select, 1

```{r}
#| label: select
#| echo: true

burgers |>
  select(Calories)
```

::: notes

The [select][ref12] function will include or exclude variables from a tibble/dataframe.

[ref12]: https://dplyr.tidyverse.org/reference/select.html

:::

## Select, 2

```{r}
#| label: select-2
#| echo: true

burgers |>
  select(-Fat)
```


## Alternatives to select, 1

```{r}
#| label: select-alternative-1
#| echo: true

burgers$Calories
```

::: notes

There are some "old school" ways to select a single column of data. Specify the name of the tibble, followed by a dollar sign, followed by the name of the variable. This produces a vector rather than a tibble.

:::

## Alternatives to select, 2

```{r}
#| label: select-alternative-2
#| echo: true

burgers[ , 1]
```

::: notes

You can also use square brackets to select a variable. This code seems a bit strange at first. Think of the comma as a separator between the first index (which indicates rows) and the second index (which indicates columns). Leaving the first index blank is equivalent of saying select all rows and just the first column.

:::

## Alternatives to select, 3

```{r}
#| label: select-alternative-3
#| echo: true

burgers[ , "Calories"]
```

::: notes

You can also specify a column by its name. Be sure to put the name inside quote marks.

:::

## Slice, 1

```{r}
#| label: slice-1
#| echo: true

burgers |>
  slice(1)
```

::: notes

The [slice][ref13] function selects rows based on their position.

[ref13]: https://dplyr.tidyverse.org/reference/slice.html

:::

## Slice, 2

```{r}
#| label: slice-2
#| echo: true

burgers |>
  slice_max(Calories)
```

::: notes

The slice_max function, described in the previous link, selects rows based on the size of one of the variables.

:::

## Filter, 1

```{r}
#| label: filter-1
#| echo: true

burgers |>
  filter(Sodium == 1500)
```

::: notes

The [filter][ref14] function selects rows of a tibble or dataframe based on a logical condition (an R expression that produces true/false values).

[ref14]: https://dplyr.tidyverse.org/reference/filter.html

:::

## Filter, 2

```{r}
#| label: filter-2
#| echo: true

burgers |>
  filter(Calories >= 600)
```

::: notes

With certain logical conditions, you can produce a tibble with more than one row.

:::

## Alternatives to slice/filter, 1

```{r}
#| label: slice-filter-alternatives-1
#| echo: true

burgers[1, ]
```

::: notes

Using the same square bracket approach, you can select one or more rows. This code selects the first row and every column.

:::


## Alternatives to slice/filter, 2

```{r}
#| label: slice-filter-alternatives-2
#| echo: true

burgers[burgers$Sodium == 1500, ]
```

::: notes

You can also place a logical condition inside the square brackets. The syntax is a bit awkward because you have to specify the name of the tibble twice.

:::
