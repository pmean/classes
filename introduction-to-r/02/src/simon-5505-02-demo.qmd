---
title: "simon-5505-02-demo"
format: 
  html:
    embed-resources: true
execute: 
  error: true
---

## File details

This program was written by Steve Simon on 2025-03-04 with a major revision on 2024-12-29. It is placed in the public domain and you can use this any way you wish.

```{r}
#| label: setup
#| message: false
#| warning: false

library(glue)
library(tidyverse)

R.version.string
Sys.Date()
```

#### Comment on the code

Always start by loading tidyverse and any other libraries you might need. Also display the date and the version of R that you are using.

## Read sleep data

The next few examples will use a different data file, sleep. Refer to the [data dictionary][ref01] for details about this file.

[ref01]: https://github.com/pmean/data/blob/main/files/sleep.yaml

## Read text file

```{r}
#| label: read-sleep

sleep <- read_tsv(
  file="../data/sleep.txt",
  col_types="cnnnnnnnnnn")
glimpse(sleep)
```

#### Comments on the code

The sleep data is too big to display on a single slide. The [glimpse][ref02] function provides a brief overview. It lists the number of rows and columns. This is followed with the name for each variable, its type, and the first few values.

[ref02]: https://dplyr.tidyverse.org/reference/glimpse.html

## Convert brain weight from grams to kilograms

```{r}
#| label: convert-units
#| echo: true

sleep |>
  mutate(brain_wt_kg=BrainWt/1000) -> sleep_1

sleep_1 |>
  select(Species, BrainWt, brain_wt_kg) |>
  slice(1:10)
```

#### Comments on the code

The [mutate][ref03] function creates a new variable or changes an existing variable. In this simple case, it is performing a unit conversion from grams to kilograms. This is needed for the next step.

[ref03]: https://dplyr.tidyverse.org/reference/mutate.html

## Calculate brain to body weight ratio

```{r}
#| label: calculate-percent
#| echo: true

sleep_1 |>
  mutate(brain_pct=100*brain_wt_kg/BodyWt) |>
  mutate(brain_pct=round(brain_pct, 2)) |>
  mutate(brain_pct=glue("{brain_pct}%")) |>
  select(Species, brain_wt_kg, BodyWt, brain_pct) |>
  slice(1:10)
```

#### Comments on the code

This is a more elaborate set of mutations. The round function is strongly recommended. It makes the data more readable. The [glue][ref04] function is icing on top of the cake. It takes the numeric calculation and adds a percent sign at the end. 

[ref04]: https://glue.tidyverse.org/

## Summarize body weight

```{r}
#| label: summarize
#| echo: true

sleep |>
  summarize(
    body_wt_mean=round(mean(BodyWt), 0),
    body_wt_sd=round(sd(BodyWt), 0),
    body_wt_min=min(BodyWt),
    body_wt_max=max(BodyWt))
```

#### Comments on the code

The [summarize][ref05] function calculates simple statistics like the mean and standard deviation.

[ref05]: https://dplyr.tidyverse.org/reference/summarise.html

I did not include any interpretations up to now because the computations were simple and self-explanatory. You should, however, always include a brief interpretation for any statistical summary like this one, as well as any graphs.

## Interpretation of the output

The mean body weight is just a bit below 200 kilograms with a standard devation of about 900. The range of weights is extremely broad. The smallest animal is 0.005 kilograms (or 5 grams) and the largest is over 6,600 kilograms.

## Variable with missing values

```{r}
#| label: summarize-2

sleep |>
  summarize(
    sleep_mean=mean(TotalSleep, na.rm=TRUE),
    sleep_sd=sd(TotalSleep, na.rm=TRUE))
```

#### Comments on the code

Several variables in the sleep file have missing values. There are many reasons why a variable might be missing. Maybe someone dropped a test tube in a lab. Maybe someone dropped out of a study. Maybe they skipped a question on your questionnaire.

Always find out why a variable is missing. How you handle the missing value during data analysis depends on the reason it is missing. This is well beyond the scope of the class, but you do need to work with missing values during the data management phase.

R uses the code NA for missing values. Other programs (SAS, SPSS) use a single dot. Other possibilities exist. Use the na argument inside of the read function if the missing value code is anything other than NA.

Think carefully about this and if you want R to ignore missing values when computing statistics, use the na.rm=TRUE argument.

You may wish to use some sort of imputation model instead of ignoring missing values. Imputation is beyond the scope of this class.

#### Interpretation of the output

The average animal sleeps for 10.5 hours. The standard deviation, 4.6, is large which indicates a wide variation in sleep times.

## Correlations with use="everything" {.smaller}

```{r}
#| label: correlation-1

options(width=120) # Allows entire correlation matrix to fit


sleep |> 
  select(where(is.numeric)) |>
  cor(use="everything") |>
  round(2)
```

#### Comment on the code

The [where][ref06] function (part of the tidyverse library) allows you to select variables that meet a certain condition. In this case, it selects variables where the [is.numeric][ref07] function evaluates to TRUE.



#### Interpretation of the output

Any correlation involving NonDreaming, Dreaming, TotalSleep, LifeSpan, and Gestation are missing because these variables have at least one missing value.

## Correlations with use="complete.obs" {.smaller}

```{r}
#| label: correlation-2

sleep |> 
  select(where(is.numeric)) |>
  cor(use="complete.obs") |>
  round(2)
options(width=80) # Reset the width to the default value
```

## Interpretation of the output

It is tricky to interpret a large matrix of correlations. A first step is to highlight any strong positive (greater than 0.7) or strong negative (less than -0.7) correlations.

There is a very strong positive association between body weight and brain weight, body weight and gestation, brain weight and gestation, non-dreaming sleep and total sleep, dreaming sleep and total sleep, predation and danger, and exposure and danger. There are no strong negative associations. There are many other weak positive and weak negative associations.


## Identifying animals with missing TotalSleep

```{r}
#| label: is.na.example
#| echo: true

sleep |>
  filter(is.na(TotalSleep)) |>
  select(Species, TotalSleep)
```

#### Comments on the code

Logic involving missing values is tricky. If you checking for equality and one of the things in the comparison is missing, then the result is neither TRUE, not FALSE, but rather missing.

The short term solution to the above problem is to use a special function, [is.na][ref08].

R is erring on the side of caution most of the time. You may not be aware that there are missing values lurking in your data, and R is going to go out of its way to remind you, unless you tell it otherwise.

This is different from SAS and SPSS, where the default options (removing missing values before computation) are perfectly reasonable approaches. These approaches, however, don't raise concern about missingness to the degree that R does.

[ref08]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/NA.html

## Counting missing values

```{r}
#| label: count-missing

sleep |>
	select(where(is.numeric)) |>
  mutate(across(everything(), is.na)) |>
  summarize(across(everything(), sum)) |>
  pivot_longer(
    everything(),
    names_to="variable",
    values_to="missing_count") |>
  filter(missing_count > 0)
```

#### Comments on the code

The [where][ref09] function allows you to select variables that meet a certain condition. In this code, you are selecting variables that satisfy the condition [is.numeric][ref10] equals TRUE. 

The [across][ref11] function (part of the dplyr/tidyverse libraries) allows you to apply various dplyr functions like mutate and summarize across more than one column. 

The [pivot_longer][ref12] function (part of the tidyr/tidyverse libraries) will connect mutliple columns of a tibble or data frame into a single column.

[ref09]: https://tidyselect.r-lib.org/reference/where.html
[ref10]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/numeric.html
[ref11]: https://dplyr.tidyverse.org/reference/across.html
[ref12]: https://tidyr.tidyverse.org/reference/pivot_longer.html

## Interpretation of the output

There are five variables with missing data. Non-dreaming and dreaming sleep have 14 and 12 missing values, respectively. Total sleep, life span, and gestation all have 4 missing values. 

## Histogram for body weight, 1

```{r}
#| label: histogram

sleep |>
  ggplot() +
  aes(x=BodyWt) +
  geom_histogram(
    color="black",
    fill="white") +
	ggtitle("Graph drawn by Steve Simon on 2025-03-04") +
	xlab("Body weight in kilograms") -> body_weight_histogram

body_weight_histogram
```

#### Comments on the code

R has at least three different approaches for graphs: [base graphs][ref13] (graphing functions built into the base R package), [lattice][ref14], and [ggplot2][ref15]. All are excellent. I will rely almost entirely on ggplot2 for graphs that I use. 

The [aes][ref16] function provides the framework for the graph. This includes which variables go on which axes, what colors are used to designate groups, and so on. You need to specify your continuous variable on the x-axis. Leave the y-axis unspecified because this is where the counts for the histogram belong.

The [geom_histogram][ref17] function specifies the use of a histogram.

I usually try a black border. The color argument specifies the color of the border and the fill argument specifies the color of the interior.

You should always use the [xlab, ylab, and ggtitle][ref18] functions to make your graphs more interpretable. The xlab function changes the label on the x-axis from the default (just the variable name itself) to a more descriptive label. There is a ylab function as well, but I did not need it for the histogram because the word "count" that ggplot uses on the y-axis for its histograms is sufficiently descriptive. The ggtitle function places a title at the top of the graph. For this class, I require you to put your name and the date as the title. If you are preparing a graph for a publication, you will probably need a different title.

[ref13]: https://r-graph-gallery.com/base-R.html
[ref14]: https://cran.r-project.org/web/packages/lattice/index.html
[ref15]: https://ggplot2.tidyverse.org/
[ref16]: https://ggplot2.tidyverse.org/reference/aes.html
[ref17]: https://ggplot2.tidyverse.org/reference/geom_histogram.html
[ref18]: https://ggplot2.tidyverse.org/reference/labs.html

#### Interpretation of the output

The distribution of weights is extremely skewed with two very extreme outliers.

## Extra tick marks, 1

```{r}
#| label: extra-ticks
#| echo: true

xticks <- seq(0, 6500, 500)
yticks <- seq(0, 50, 5)
body_weight_histogram +
  scale_x_continuous(
    breaks=xticks,
    labels=format(xticks, big.mark=",")) +
  scale_y_continuous(breaks=yticks)
```

#### Comments on the code

The [seq][ref19] function provides an evenly spaced sequence of numbers. If the sequence increases by increments of 1, you can use the colon operator to produce the sequence. For example, seq(0,5, 1) and 0:5 both produce a vector with the values 0, 1, 2, 3, 4, 5.

The [scale_x_continuous and scale_y_continuous][ref20] functions control how the x and y axes are labelled. In this example, the breaks argument shows where to place tick marks and the labels argument changes what is displayed at each tick mark.

The [format][ref21] function modifies how numbers are displayed. The big.mark="," argument inserts commas for any numbers greater than 999.

[ref19]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/seq.html
[ref20]: https://ggplot2.tidyverse.org/reference/scale_continuous.html
[ref21]: https://stat.ethz.ch/R-manual/R-devel/library/base/html/format.html

## Log transformed histogram, 1

```{r}
#| label: histogram-with-log10-scale
#| echo: true

ticks <- 10^(-2:3)
body_weight_histogram +
  scale_x_log10(
    breaks=ticks,
    minor_breaks=NULL,
    labels=ticks)
```

#### Comments on the code

The [scale_x_log10][ref22] function is one of a series of functions that controls how the scale of the x axis appears.

[ref22]: https://ggplot2.tidyverse.org/reference/scale_continuous.html

#### Interpretation of the output

The body weights are approximately normal after a log transformation.

## Labeled scatterplot, 1

```{r}
#| label: scatterplot-1
#| echo: true

sleep |>
  ggplot() +
  aes(x=BodyWt, y=BrainWt) +
  geom_point() + 
  ggtitle("This graph was drawn by Steve Simon on 2025-01-02") +
  xlab("Body weight (kg)") +
  ylab("Brain weight (g)") -> labeled_scatterplot

labeled_scatterplot
```

#### Comments on the code

You produce a scatterplot by specifying continuous variables for x and y and using the [geom_point][ref23] function. Get in the habit of changing the labels on the axes to something more descriptive. Always include the units of measure.

[ref23]: https://ggplot2.tidyverse.org/reference/geom_point.html

#### Interpretation of the output

Notice how a few outliers distort the scale of this graph. It is hard to tell what is going on because the data is clustered in the lower left corner of the graph.

## Log transformed scatterplot, 1

```{r}
#| label: log-transformed-scatterplot-1
#| echo: true

xticks <- 10^(-2:3)
yticks <- 10^(-2:3)
labeled_scatterplot +
  scale_x_log10(
    breaks=xticks,
    minor_breaks=NULL,
    labels=xticks) +
  scale_y_log10(
    breaks=yticks,
    minor_breaks=NULL,
    labels=yticks) -> log_scatterplot

log_scatterplot
```

#### Comments on the code

Log transformation to the rescue! There is a strong positive association between body weight and brain weight.

## Add a trend line

```{r}
#| label: trend-line-1
#| echo: true

log_scatterplot +
  geom_smooth(method="gam")
```

### Comments on the code

The [geom_smooth][ref24] function adds a flexible trend line to a scatterplot. The argument method="gam" uses a cubic spline. This is a nice default choice. Changing the argument method="lm" produces a simple linear trend.

[ref24]: https://ggplot2.tidyverse.org/reference/geom_smooth.html
